// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2dcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2dcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2dcommon_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace common {
class ButtonAck;
struct ButtonAckDefaultTypeInternal;
extern ButtonAckDefaultTypeInternal _ButtonAck_default_instance_;
class ButtonRequest;
struct ButtonRequestDefaultTypeInternal;
extern ButtonRequestDefaultTypeInternal _ButtonRequest_default_instance_;
class Deprecated_PassphraseStateAck;
struct Deprecated_PassphraseStateAckDefaultTypeInternal;
extern Deprecated_PassphraseStateAckDefaultTypeInternal _Deprecated_PassphraseStateAck_default_instance_;
class Deprecated_PassphraseStateRequest;
struct Deprecated_PassphraseStateRequestDefaultTypeInternal;
extern Deprecated_PassphraseStateRequestDefaultTypeInternal _Deprecated_PassphraseStateRequest_default_instance_;
class Failure;
struct FailureDefaultTypeInternal;
extern FailureDefaultTypeInternal _Failure_default_instance_;
class HDNodeType;
struct HDNodeTypeDefaultTypeInternal;
extern HDNodeTypeDefaultTypeInternal _HDNodeType_default_instance_;
class PassphraseAck;
struct PassphraseAckDefaultTypeInternal;
extern PassphraseAckDefaultTypeInternal _PassphraseAck_default_instance_;
class PassphraseRequest;
struct PassphraseRequestDefaultTypeInternal;
extern PassphraseRequestDefaultTypeInternal _PassphraseRequest_default_instance_;
class PinMatrixAck;
struct PinMatrixAckDefaultTypeInternal;
extern PinMatrixAckDefaultTypeInternal _PinMatrixAck_default_instance_;
class PinMatrixRequest;
struct PinMatrixRequestDefaultTypeInternal;
extern PinMatrixRequestDefaultTypeInternal _PinMatrixRequest_default_instance_;
class Success;
struct SuccessDefaultTypeInternal;
extern SuccessDefaultTypeInternal _Success_default_instance_;
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> ::hw::trezor::messages::common::ButtonAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::ButtonAck>(Arena*);
template<> ::hw::trezor::messages::common::ButtonRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::ButtonRequest>(Arena*);
template<> ::hw::trezor::messages::common::Deprecated_PassphraseStateAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Deprecated_PassphraseStateAck>(Arena*);
template<> ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Deprecated_PassphraseStateRequest>(Arena*);
template<> ::hw::trezor::messages::common::Failure* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Failure>(Arena*);
template<> ::hw::trezor::messages::common::HDNodeType* Arena::CreateMaybeMessage<::hw::trezor::messages::common::HDNodeType>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseAck>(Arena*);
template<> ::hw::trezor::messages::common::PassphraseRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PassphraseRequest>(Arena*);
template<> ::hw::trezor::messages::common::PinMatrixAck* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PinMatrixAck>(Arena*);
template<> ::hw::trezor::messages::common::PinMatrixRequest* Arena::CreateMaybeMessage<::hw::trezor::messages::common::PinMatrixRequest>(Arena*);
template<> ::hw::trezor::messages::common::Success* Arena::CreateMaybeMessage<::hw::trezor::messages::common::Success>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hw {
namespace trezor {
namespace messages {
namespace common {

enum Failure_FailureType : int {
  Failure_FailureType_Failure_UnexpectedMessage = 1,
  Failure_FailureType_Failure_ButtonExpected = 2,
  Failure_FailureType_Failure_DataError = 3,
  Failure_FailureType_Failure_ActionCancelled = 4,
  Failure_FailureType_Failure_PinExpected = 5,
  Failure_FailureType_Failure_PinCancelled = 6,
  Failure_FailureType_Failure_PinInvalid = 7,
  Failure_FailureType_Failure_InvalidSignature = 8,
  Failure_FailureType_Failure_ProcessError = 9,
  Failure_FailureType_Failure_NotEnoughFunds = 10,
  Failure_FailureType_Failure_NotInitialized = 11,
  Failure_FailureType_Failure_PinMismatch = 12,
  Failure_FailureType_Failure_WipeCodeMismatch = 13,
  Failure_FailureType_Failure_InvalidSession = 14,
  Failure_FailureType_Failure_FirmwareError = 99
};
bool Failure_FailureType_IsValid(int value);
constexpr Failure_FailureType Failure_FailureType_FailureType_MIN = Failure_FailureType_Failure_UnexpectedMessage;
constexpr Failure_FailureType Failure_FailureType_FailureType_MAX = Failure_FailureType_Failure_FirmwareError;
constexpr int Failure_FailureType_FailureType_ARRAYSIZE = Failure_FailureType_FailureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Failure_FailureType_descriptor();
template<typename T>
inline const std::string& Failure_FailureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Failure_FailureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Failure_FailureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Failure_FailureType_descriptor(), enum_t_value);
}
inline bool Failure_FailureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Failure_FailureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Failure_FailureType>(
    Failure_FailureType_descriptor(), name, value);
}
enum ButtonRequest_ButtonRequestType : int {
  ButtonRequest_ButtonRequestType_ButtonRequest_Other = 1,
  ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold = 2,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput = 3,
  ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice = 4,
  ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord = 5,
  ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice = 6,
  ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall = 7,
  ButtonRequest_ButtonRequestType_ButtonRequest_SignTx = 8,
  ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck = 9,
  ButtonRequest_ButtonRequestType_ButtonRequest_Address = 10,
  ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey = 11,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount = 12,
  ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput = 13,
  ButtonRequest_ButtonRequestType__Deprecated_ButtonRequest_PassphraseType PROTOBUF_DEPRECATED_ENUM = 14,
  ButtonRequest_ButtonRequestType_ButtonRequest_UnknownDerivationPath = 15,
  ButtonRequest_ButtonRequestType_ButtonRequest_RecoveryHomepage = 16,
  ButtonRequest_ButtonRequestType_ButtonRequest_Success = 17,
  ButtonRequest_ButtonRequestType_ButtonRequest_Warning = 18,
  ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseEntry = 19,
  ButtonRequest_ButtonRequestType_ButtonRequest_PinEntry = 20
};
bool ButtonRequest_ButtonRequestType_IsValid(int value);
constexpr ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MIN = ButtonRequest_ButtonRequestType_ButtonRequest_Other;
constexpr ButtonRequest_ButtonRequestType ButtonRequest_ButtonRequestType_ButtonRequestType_MAX = ButtonRequest_ButtonRequestType_ButtonRequest_PinEntry;
constexpr int ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE = ButtonRequest_ButtonRequestType_ButtonRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor();
template<typename T>
inline const std::string& ButtonRequest_ButtonRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ButtonRequest_ButtonRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ButtonRequest_ButtonRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ButtonRequest_ButtonRequestType_descriptor(), enum_t_value);
}
inline bool ButtonRequest_ButtonRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ButtonRequest_ButtonRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ButtonRequest_ButtonRequestType>(
    ButtonRequest_ButtonRequestType_descriptor(), name, value);
}
enum PinMatrixRequest_PinMatrixRequestType : int {
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current = 1,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst = 2,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond = 3,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_WipeCodeFirst = 4,
  PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_WipeCodeSecond = 5
};
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value);
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_WipeCodeSecond;
constexpr int PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE = PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor();
template<typename T>
inline const std::string& PinMatrixRequest_PinMatrixRequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PinMatrixRequest_PinMatrixRequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PinMatrixRequest_PinMatrixRequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), enum_t_value);
}
inline bool PinMatrixRequest_PinMatrixRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PinMatrixRequest_PinMatrixRequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PinMatrixRequest_PinMatrixRequestType>(
    PinMatrixRequest_PinMatrixRequestType_descriptor(), name, value);
}
// ===================================================================

class Success final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Success) */ {
 public:
  inline Success() : Success(nullptr) {}
  ~Success() override;
  explicit PROTOBUF_CONSTEXPR Success(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Success(const Success& from);
  Success(Success&& from) noexcept
    : Success() {
    *this = ::std::move(from);
  }

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }
  inline Success& operator=(Success&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Success& default_instance() {
    return *internal_default_instance();
  }
  static inline const Success* internal_default_instance() {
    return reinterpret_cast<const Success*>(
               &_Success_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Success& a, Success& b) {
    a.Swap(&b);
  }
  inline void Swap(Success* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Success* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Success* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Success>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Success& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Success& from) {
    Success::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Success* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.Success";
  }
  protected:
  explicit Success(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional string message = 1 [default = ""];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Success)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class Failure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Failure) */ {
 public:
  inline Failure() : Failure(nullptr) {}
  ~Failure() override;
  explicit PROTOBUF_CONSTEXPR Failure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Failure(const Failure& from);
  Failure(Failure&& from) noexcept
    : Failure() {
    *this = ::std::move(from);
  }

  inline Failure& operator=(const Failure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Failure& operator=(Failure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Failure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Failure* internal_default_instance() {
    return reinterpret_cast<const Failure*>(
               &_Failure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Failure& a, Failure& b) {
    a.Swap(&b);
  }
  inline void Swap(Failure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Failure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Failure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Failure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Failure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Failure& from) {
    Failure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Failure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.Failure";
  }
  protected:
  explicit Failure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Failure_FailureType FailureType;
  static constexpr FailureType Failure_UnexpectedMessage =
    Failure_FailureType_Failure_UnexpectedMessage;
  static constexpr FailureType Failure_ButtonExpected =
    Failure_FailureType_Failure_ButtonExpected;
  static constexpr FailureType Failure_DataError =
    Failure_FailureType_Failure_DataError;
  static constexpr FailureType Failure_ActionCancelled =
    Failure_FailureType_Failure_ActionCancelled;
  static constexpr FailureType Failure_PinExpected =
    Failure_FailureType_Failure_PinExpected;
  static constexpr FailureType Failure_PinCancelled =
    Failure_FailureType_Failure_PinCancelled;
  static constexpr FailureType Failure_PinInvalid =
    Failure_FailureType_Failure_PinInvalid;
  static constexpr FailureType Failure_InvalidSignature =
    Failure_FailureType_Failure_InvalidSignature;
  static constexpr FailureType Failure_ProcessError =
    Failure_FailureType_Failure_ProcessError;
  static constexpr FailureType Failure_NotEnoughFunds =
    Failure_FailureType_Failure_NotEnoughFunds;
  static constexpr FailureType Failure_NotInitialized =
    Failure_FailureType_Failure_NotInitialized;
  static constexpr FailureType Failure_PinMismatch =
    Failure_FailureType_Failure_PinMismatch;
  static constexpr FailureType Failure_WipeCodeMismatch =
    Failure_FailureType_Failure_WipeCodeMismatch;
  static constexpr FailureType Failure_InvalidSession =
    Failure_FailureType_Failure_InvalidSession;
  static constexpr FailureType Failure_FirmwareError =
    Failure_FailureType_Failure_FirmwareError;
  static inline bool FailureType_IsValid(int value) {
    return Failure_FailureType_IsValid(value);
  }
  static constexpr FailureType FailureType_MIN =
    Failure_FailureType_FailureType_MIN;
  static constexpr FailureType FailureType_MAX =
    Failure_FailureType_FailureType_MAX;
  static constexpr int FailureType_ARRAYSIZE =
    Failure_FailureType_FailureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailureType_descriptor() {
    return Failure_FailureType_descriptor();
  }
  template<typename T>
  static inline const std::string& FailureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailureType_Name.");
    return Failure_FailureType_Name(enum_t_value);
  }
  static inline bool FailureType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FailureType* value) {
    return Failure_FailureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::hw::trezor::messages::common::Failure_FailureType code() const;
  void set_code(::hw::trezor::messages::common::Failure_FailureType value);
  private:
  ::hw::trezor::messages::common::Failure_FailureType _internal_code() const;
  void _internal_set_code(::hw::trezor::messages::common::Failure_FailureType value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Failure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class ButtonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.ButtonRequest) */ {
 public:
  inline ButtonRequest() : ButtonRequest(nullptr) {}
  ~ButtonRequest() override;
  explicit PROTOBUF_CONSTEXPR ButtonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonRequest(const ButtonRequest& from);
  ButtonRequest(ButtonRequest&& from) noexcept
    : ButtonRequest() {
    *this = ::std::move(from);
  }

  inline ButtonRequest& operator=(const ButtonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonRequest& operator=(ButtonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonRequest* internal_default_instance() {
    return reinterpret_cast<const ButtonRequest*>(
               &_ButtonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ButtonRequest& a, ButtonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ButtonRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ButtonRequest& from) {
    ButtonRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ButtonRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.ButtonRequest";
  }
  protected:
  explicit ButtonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ButtonRequest_ButtonRequestType ButtonRequestType;
  static constexpr ButtonRequestType ButtonRequest_Other =
    ButtonRequest_ButtonRequestType_ButtonRequest_Other;
  static constexpr ButtonRequestType ButtonRequest_FeeOverThreshold =
    ButtonRequest_ButtonRequestType_ButtonRequest_FeeOverThreshold;
  static constexpr ButtonRequestType ButtonRequest_ConfirmOutput =
    ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmOutput;
  static constexpr ButtonRequestType ButtonRequest_ResetDevice =
    ButtonRequest_ButtonRequestType_ButtonRequest_ResetDevice;
  static constexpr ButtonRequestType ButtonRequest_ConfirmWord =
    ButtonRequest_ButtonRequestType_ButtonRequest_ConfirmWord;
  static constexpr ButtonRequestType ButtonRequest_WipeDevice =
    ButtonRequest_ButtonRequestType_ButtonRequest_WipeDevice;
  static constexpr ButtonRequestType ButtonRequest_ProtectCall =
    ButtonRequest_ButtonRequestType_ButtonRequest_ProtectCall;
  static constexpr ButtonRequestType ButtonRequest_SignTx =
    ButtonRequest_ButtonRequestType_ButtonRequest_SignTx;
  static constexpr ButtonRequestType ButtonRequest_FirmwareCheck =
    ButtonRequest_ButtonRequestType_ButtonRequest_FirmwareCheck;
  static constexpr ButtonRequestType ButtonRequest_Address =
    ButtonRequest_ButtonRequestType_ButtonRequest_Address;
  static constexpr ButtonRequestType ButtonRequest_PublicKey =
    ButtonRequest_ButtonRequestType_ButtonRequest_PublicKey;
  static constexpr ButtonRequestType ButtonRequest_MnemonicWordCount =
    ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicWordCount;
  static constexpr ButtonRequestType ButtonRequest_MnemonicInput =
    ButtonRequest_ButtonRequestType_ButtonRequest_MnemonicInput;
  PROTOBUF_DEPRECATED_ENUM static constexpr ButtonRequestType _Deprecated_ButtonRequest_PassphraseType =
    ButtonRequest_ButtonRequestType__Deprecated_ButtonRequest_PassphraseType;
  static constexpr ButtonRequestType ButtonRequest_UnknownDerivationPath =
    ButtonRequest_ButtonRequestType_ButtonRequest_UnknownDerivationPath;
  static constexpr ButtonRequestType ButtonRequest_RecoveryHomepage =
    ButtonRequest_ButtonRequestType_ButtonRequest_RecoveryHomepage;
  static constexpr ButtonRequestType ButtonRequest_Success =
    ButtonRequest_ButtonRequestType_ButtonRequest_Success;
  static constexpr ButtonRequestType ButtonRequest_Warning =
    ButtonRequest_ButtonRequestType_ButtonRequest_Warning;
  static constexpr ButtonRequestType ButtonRequest_PassphraseEntry =
    ButtonRequest_ButtonRequestType_ButtonRequest_PassphraseEntry;
  static constexpr ButtonRequestType ButtonRequest_PinEntry =
    ButtonRequest_ButtonRequestType_ButtonRequest_PinEntry;
  static inline bool ButtonRequestType_IsValid(int value) {
    return ButtonRequest_ButtonRequestType_IsValid(value);
  }
  static constexpr ButtonRequestType ButtonRequestType_MIN =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MIN;
  static constexpr ButtonRequestType ButtonRequestType_MAX =
    ButtonRequest_ButtonRequestType_ButtonRequestType_MAX;
  static constexpr int ButtonRequestType_ARRAYSIZE =
    ButtonRequest_ButtonRequestType_ButtonRequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ButtonRequestType_descriptor() {
    return ButtonRequest_ButtonRequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& ButtonRequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ButtonRequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ButtonRequestType_Name.");
    return ButtonRequest_ButtonRequestType_Name(enum_t_value);
  }
  static inline bool ButtonRequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ButtonRequestType* value) {
    return ButtonRequest_ButtonRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPagesFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional uint32 pages = 2;
  bool has_pages() const;
  private:
  bool _internal_has_pages() const;
  public:
  void clear_pages();
  uint32_t pages() const;
  void set_pages(uint32_t value);
  private:
  uint32_t _internal_pages() const;
  void _internal_set_pages(uint32_t value);
  public:

  // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType code() const;
  void set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value);
  private:
  ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType _internal_code() const;
  void _internal_set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.ButtonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pages_;
    int code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class ButtonAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.ButtonAck) */ {
 public:
  inline ButtonAck() : ButtonAck(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ButtonAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ButtonAck(const ButtonAck& from);
  ButtonAck(ButtonAck&& from) noexcept
    : ButtonAck() {
    *this = ::std::move(from);
  }

  inline ButtonAck& operator=(const ButtonAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ButtonAck& operator=(ButtonAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ButtonAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ButtonAck* internal_default_instance() {
    return reinterpret_cast<const ButtonAck*>(
               &_ButtonAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ButtonAck& a, ButtonAck& b) {
    a.Swap(&b);
  }
  inline void Swap(ButtonAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ButtonAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ButtonAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ButtonAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ButtonAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ButtonAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.ButtonAck";
  }
  protected:
  explicit ButtonAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.ButtonAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PinMatrixRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PinMatrixRequest) */ {
 public:
  inline PinMatrixRequest() : PinMatrixRequest(nullptr) {}
  ~PinMatrixRequest() override;
  explicit PROTOBUF_CONSTEXPR PinMatrixRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinMatrixRequest(const PinMatrixRequest& from);
  PinMatrixRequest(PinMatrixRequest&& from) noexcept
    : PinMatrixRequest() {
    *this = ::std::move(from);
  }

  inline PinMatrixRequest& operator=(const PinMatrixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinMatrixRequest& operator=(PinMatrixRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PinMatrixRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinMatrixRequest* internal_default_instance() {
    return reinterpret_cast<const PinMatrixRequest*>(
               &_PinMatrixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PinMatrixRequest& a, PinMatrixRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PinMatrixRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinMatrixRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinMatrixRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinMatrixRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PinMatrixRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PinMatrixRequest& from) {
    PinMatrixRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinMatrixRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.PinMatrixRequest";
  }
  protected:
  explicit PinMatrixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PinMatrixRequest_PinMatrixRequestType PinMatrixRequestType;
  static constexpr PinMatrixRequestType PinMatrixRequestType_Current =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_Current;
  static constexpr PinMatrixRequestType PinMatrixRequestType_NewFirst =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewFirst;
  static constexpr PinMatrixRequestType PinMatrixRequestType_NewSecond =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_NewSecond;
  static constexpr PinMatrixRequestType PinMatrixRequestType_WipeCodeFirst =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_WipeCodeFirst;
  static constexpr PinMatrixRequestType PinMatrixRequestType_WipeCodeSecond =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_WipeCodeSecond;
  static inline bool PinMatrixRequestType_IsValid(int value) {
    return PinMatrixRequest_PinMatrixRequestType_IsValid(value);
  }
  static constexpr PinMatrixRequestType PinMatrixRequestType_MIN =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MIN;
  static constexpr PinMatrixRequestType PinMatrixRequestType_MAX =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_MAX;
  static constexpr int PinMatrixRequestType_ARRAYSIZE =
    PinMatrixRequest_PinMatrixRequestType_PinMatrixRequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PinMatrixRequestType_descriptor() {
    return PinMatrixRequest_PinMatrixRequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& PinMatrixRequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PinMatrixRequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PinMatrixRequestType_Name.");
    return PinMatrixRequest_PinMatrixRequestType_Name(enum_t_value);
  }
  static inline bool PinMatrixRequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PinMatrixRequestType* value) {
    return PinMatrixRequest_PinMatrixRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType type() const;
  void set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value);
  private:
  ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType _internal_type() const;
  void _internal_set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PinMatrixRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PinMatrixAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PinMatrixAck) */ {
 public:
  inline PinMatrixAck() : PinMatrixAck(nullptr) {}
  ~PinMatrixAck() override;
  explicit PROTOBUF_CONSTEXPR PinMatrixAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinMatrixAck(const PinMatrixAck& from);
  PinMatrixAck(PinMatrixAck&& from) noexcept
    : PinMatrixAck() {
    *this = ::std::move(from);
  }

  inline PinMatrixAck& operator=(const PinMatrixAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinMatrixAck& operator=(PinMatrixAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PinMatrixAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinMatrixAck* internal_default_instance() {
    return reinterpret_cast<const PinMatrixAck*>(
               &_PinMatrixAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PinMatrixAck& a, PinMatrixAck& b) {
    a.Swap(&b);
  }
  inline void Swap(PinMatrixAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinMatrixAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinMatrixAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinMatrixAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PinMatrixAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PinMatrixAck& from) {
    PinMatrixAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinMatrixAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.PinMatrixAck";
  }
  protected:
  explicit PinMatrixAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
  };
  // required string pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PinMatrixAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseRequest) */ {
 public:
  inline PassphraseRequest() : PassphraseRequest(nullptr) {}
  ~PassphraseRequest() override;
  explicit PROTOBUF_CONSTEXPR PassphraseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassphraseRequest(const PassphraseRequest& from);
  PassphraseRequest(PassphraseRequest&& from) noexcept
    : PassphraseRequest() {
    *this = ::std::move(from);
  }

  inline PassphraseRequest& operator=(const PassphraseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassphraseRequest& operator=(PassphraseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PassphraseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassphraseRequest* internal_default_instance() {
    return reinterpret_cast<const PassphraseRequest*>(
               &_PassphraseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PassphraseRequest& a, PassphraseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PassphraseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassphraseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PassphraseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PassphraseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PassphraseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PassphraseRequest& from) {
    PassphraseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.PassphraseRequest";
  }
  protected:
  explicit PassphraseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnDeviceFieldNumber = 1,
  };
  // optional bool _on_device = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has__on_device() const;
  private:
  bool _internal_has__on_device() const;
  public:
  PROTOBUF_DEPRECATED void clear__on_device();
  PROTOBUF_DEPRECATED bool _on_device() const;
  PROTOBUF_DEPRECATED void set__on_device(bool value);
  private:
  bool _internal__on_device() const;
  void _internal_set__on_device(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool _on_device_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class PassphraseAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.PassphraseAck) */ {
 public:
  inline PassphraseAck() : PassphraseAck(nullptr) {}
  ~PassphraseAck() override;
  explicit PROTOBUF_CONSTEXPR PassphraseAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassphraseAck(const PassphraseAck& from);
  PassphraseAck(PassphraseAck&& from) noexcept
    : PassphraseAck() {
    *this = ::std::move(from);
  }

  inline PassphraseAck& operator=(const PassphraseAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassphraseAck& operator=(PassphraseAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PassphraseAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassphraseAck* internal_default_instance() {
    return reinterpret_cast<const PassphraseAck*>(
               &_PassphraseAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PassphraseAck& a, PassphraseAck& b) {
    a.Swap(&b);
  }
  inline void Swap(PassphraseAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassphraseAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PassphraseAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PassphraseAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PassphraseAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PassphraseAck& from) {
    PassphraseAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassphraseAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.PassphraseAck";
  }
  protected:
  explicit PassphraseAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassphraseFieldNumber = 1,
    kStateFieldNumber = 2,
    kOnDeviceFieldNumber = 3,
  };
  // optional string passphrase = 1;
  bool has_passphrase() const;
  private:
  bool _internal_has_passphrase() const;
  public:
  void clear_passphrase();
  const std::string& passphrase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passphrase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passphrase();
  PROTOBUF_NODISCARD std::string* release_passphrase();
  void set_allocated_passphrase(std::string* passphrase);
  private:
  const std::string& _internal_passphrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passphrase(const std::string& value);
  std::string* _internal_mutable_passphrase();
  public:

  // optional bytes _state = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has__state() const;
  private:
  bool _internal_has__state() const;
  public:
  PROTOBUF_DEPRECATED void clear__state();
  PROTOBUF_DEPRECATED const std::string& _state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set__state(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable__state();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release__state();
  PROTOBUF_DEPRECATED void set_allocated__state(std::string* _state);
  private:
  const std::string& _internal__state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__state(const std::string& value);
  std::string* _internal_mutable__state();
  public:

  // optional bool on_device = 3;
  bool has_on_device() const;
  private:
  bool _internal_has_on_device() const;
  public:
  void clear_on_device();
  bool on_device() const;
  void set_on_device(bool value);
  private:
  bool _internal_on_device() const;
  void _internal_set_on_device(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.PassphraseAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passphrase_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _state_;
    bool on_device_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class Deprecated_PassphraseStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Deprecated_PassphraseStateRequest) */ {
 public:
  inline Deprecated_PassphraseStateRequest() : Deprecated_PassphraseStateRequest(nullptr) {}
  ~Deprecated_PassphraseStateRequest() override;
  explicit PROTOBUF_CONSTEXPR Deprecated_PassphraseStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deprecated_PassphraseStateRequest(const Deprecated_PassphraseStateRequest& from);
  Deprecated_PassphraseStateRequest(Deprecated_PassphraseStateRequest&& from) noexcept
    : Deprecated_PassphraseStateRequest() {
    *this = ::std::move(from);
  }

  inline Deprecated_PassphraseStateRequest& operator=(const Deprecated_PassphraseStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deprecated_PassphraseStateRequest& operator=(Deprecated_PassphraseStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deprecated_PassphraseStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deprecated_PassphraseStateRequest* internal_default_instance() {
    return reinterpret_cast<const Deprecated_PassphraseStateRequest*>(
               &_Deprecated_PassphraseStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Deprecated_PassphraseStateRequest& a, Deprecated_PassphraseStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Deprecated_PassphraseStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deprecated_PassphraseStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deprecated_PassphraseStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deprecated_PassphraseStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Deprecated_PassphraseStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Deprecated_PassphraseStateRequest& from) {
    Deprecated_PassphraseStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deprecated_PassphraseStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.Deprecated_PassphraseStateRequest";
  }
  protected:
  explicit Deprecated_PassphraseStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // optional bytes state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class Deprecated_PassphraseStateAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.Deprecated_PassphraseStateAck) */ {
 public:
  inline Deprecated_PassphraseStateAck() : Deprecated_PassphraseStateAck(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Deprecated_PassphraseStateAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deprecated_PassphraseStateAck(const Deprecated_PassphraseStateAck& from);
  Deprecated_PassphraseStateAck(Deprecated_PassphraseStateAck&& from) noexcept
    : Deprecated_PassphraseStateAck() {
    *this = ::std::move(from);
  }

  inline Deprecated_PassphraseStateAck& operator=(const Deprecated_PassphraseStateAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deprecated_PassphraseStateAck& operator=(Deprecated_PassphraseStateAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deprecated_PassphraseStateAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deprecated_PassphraseStateAck* internal_default_instance() {
    return reinterpret_cast<const Deprecated_PassphraseStateAck*>(
               &_Deprecated_PassphraseStateAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Deprecated_PassphraseStateAck& a, Deprecated_PassphraseStateAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Deprecated_PassphraseStateAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deprecated_PassphraseStateAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deprecated_PassphraseStateAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deprecated_PassphraseStateAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Deprecated_PassphraseStateAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Deprecated_PassphraseStateAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.Deprecated_PassphraseStateAck";
  }
  protected:
  explicit Deprecated_PassphraseStateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// -------------------------------------------------------------------

class HDNodeType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.common.HDNodeType) */ {
 public:
  inline HDNodeType() : HDNodeType(nullptr) {}
  ~HDNodeType() override;
  explicit PROTOBUF_CONSTEXPR HDNodeType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HDNodeType(const HDNodeType& from);
  HDNodeType(HDNodeType&& from) noexcept
    : HDNodeType() {
    *this = ::std::move(from);
  }

  inline HDNodeType& operator=(const HDNodeType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDNodeType& operator=(HDNodeType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HDNodeType& default_instance() {
    return *internal_default_instance();
  }
  static inline const HDNodeType* internal_default_instance() {
    return reinterpret_cast<const HDNodeType*>(
               &_HDNodeType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HDNodeType& a, HDNodeType& b) {
    a.Swap(&b);
  }
  inline void Swap(HDNodeType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDNodeType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HDNodeType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HDNodeType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HDNodeType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HDNodeType& from) {
    HDNodeType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HDNodeType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hw.trezor.messages.common.HDNodeType";
  }
  protected:
  explicit HDNodeType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainCodeFieldNumber = 4,
    kPrivateKeyFieldNumber = 5,
    kPublicKeyFieldNumber = 6,
    kDepthFieldNumber = 1,
    kFingerprintFieldNumber = 2,
    kChildNumFieldNumber = 3,
  };
  // required bytes chain_code = 4;
  bool has_chain_code() const;
  private:
  bool _internal_has_chain_code() const;
  public:
  void clear_chain_code();
  const std::string& chain_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_code();
  PROTOBUF_NODISCARD std::string* release_chain_code();
  void set_allocated_chain_code(std::string* chain_code);
  private:
  const std::string& _internal_chain_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_code(const std::string& value);
  std::string* _internal_mutable_chain_code();
  public:

  // optional bytes private_key = 5;
  bool has_private_key() const;
  private:
  bool _internal_has_private_key() const;
  public:
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // required bytes public_key = 6;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // required uint32 depth = 1;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  uint32_t depth() const;
  void set_depth(uint32_t value);
  private:
  uint32_t _internal_depth() const;
  void _internal_set_depth(uint32_t value);
  public:

  // required uint32 fingerprint = 2;
  bool has_fingerprint() const;
  private:
  bool _internal_has_fingerprint() const;
  public:
  void clear_fingerprint();
  uint32_t fingerprint() const;
  void set_fingerprint(uint32_t value);
  private:
  uint32_t _internal_fingerprint() const;
  void _internal_set_fingerprint(uint32_t value);
  public:

  // required uint32 child_num = 3;
  bool has_child_num() const;
  private:
  bool _internal_has_child_num() const;
  public:
  void clear_child_num();
  uint32_t child_num() const;
  void set_child_num(uint32_t value);
  private:
  uint32_t _internal_child_num() const;
  void _internal_set_child_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.common.HDNodeType)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    uint32_t depth_;
    uint32_t fingerprint_;
    uint32_t child_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2dcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Success

// optional string message = 1 [default = ""];
inline bool Success::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Success::has_message() const {
  return _internal_has_message();
}
inline void Success::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Success.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Success::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Success.message)
}
inline std::string* Success::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.Success.message)
  return _s;
}
inline const std::string& Success::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Success::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Success::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Success::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.Success.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Success::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.Success.message)
}

// -------------------------------------------------------------------

// Failure

// optional .hw.trezor.messages.common.Failure.FailureType code = 1;
inline bool Failure::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Failure::has_code() const {
  return _internal_has_code();
}
inline void Failure::clear_code() {
  _impl_.code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::hw::trezor::messages::common::Failure_FailureType Failure::_internal_code() const {
  return static_cast< ::hw::trezor::messages::common::Failure_FailureType >(_impl_.code_);
}
inline ::hw::trezor::messages::common::Failure_FailureType Failure::code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Failure.code)
  return _internal_code();
}
inline void Failure::_internal_set_code(::hw::trezor::messages::common::Failure_FailureType value) {
  assert(::hw::trezor::messages::common::Failure_FailureType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void Failure::set_code(::hw::trezor::messages::common::Failure_FailureType value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Failure.code)
}

// optional string message = 2;
inline bool Failure::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Failure::has_message() const {
  return _internal_has_message();
}
inline void Failure::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Failure::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Failure.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Failure::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Failure.message)
}
inline std::string* Failure::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.Failure.message)
  return _s;
}
inline const std::string& Failure::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Failure::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Failure::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Failure::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.Failure.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Failure::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.Failure.message)
}

// -------------------------------------------------------------------

// ButtonRequest

// optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
inline bool ButtonRequest::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ButtonRequest::has_code() const {
  return _internal_has_code();
}
inline void ButtonRequest::clear_code() {
  _impl_.code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType ButtonRequest::_internal_code() const {
  return static_cast< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType >(_impl_.code_);
}
inline ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType ButtonRequest::code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.ButtonRequest.code)
  return _internal_code();
}
inline void ButtonRequest::_internal_set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value) {
  assert(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.code_ = value;
}
inline void ButtonRequest::set_code(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.ButtonRequest.code)
}

// optional uint32 pages = 2;
inline bool ButtonRequest::_internal_has_pages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ButtonRequest::has_pages() const {
  return _internal_has_pages();
}
inline void ButtonRequest::clear_pages() {
  _impl_.pages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ButtonRequest::_internal_pages() const {
  return _impl_.pages_;
}
inline uint32_t ButtonRequest::pages() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.ButtonRequest.pages)
  return _internal_pages();
}
inline void ButtonRequest::_internal_set_pages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pages_ = value;
}
inline void ButtonRequest::set_pages(uint32_t value) {
  _internal_set_pages(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.ButtonRequest.pages)
}

// -------------------------------------------------------------------

// ButtonAck

// -------------------------------------------------------------------

// PinMatrixRequest

// optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
inline bool PinMatrixRequest::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PinMatrixRequest::has_type() const {
  return _internal_has_type();
}
inline void PinMatrixRequest::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::_internal_type() const {
  return static_cast< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType >(_impl_.type_);
}
inline ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PinMatrixRequest.type)
  return _internal_type();
}
inline void PinMatrixRequest::_internal_set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value) {
  assert(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void PinMatrixRequest::set_type(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PinMatrixRequest.type)
}

// -------------------------------------------------------------------

// PinMatrixAck

// required string pin = 1;
inline bool PinMatrixAck::_internal_has_pin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PinMatrixAck::has_pin() const {
  return _internal_has_pin();
}
inline void PinMatrixAck::clear_pin() {
  _impl_.pin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PinMatrixAck::pin() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PinMatrixAck.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PinMatrixAck::set_pin(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PinMatrixAck.pin)
}
inline std::string* PinMatrixAck::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PinMatrixAck.pin)
  return _s;
}
inline const std::string& PinMatrixAck::_internal_pin() const {
  return _impl_.pin_.Get();
}
inline void PinMatrixAck::_internal_set_pin(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pin_.Set(value, GetArenaForAllocation());
}
inline std::string* PinMatrixAck::_internal_mutable_pin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pin_.Mutable(GetArenaForAllocation());
}
inline std::string* PinMatrixAck::release_pin() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PinMatrixAck.pin)
  if (!_internal_has_pin()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pin_.IsDefault()) {
    _impl_.pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PinMatrixAck::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pin_.IsDefault()) {
    _impl_.pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PinMatrixAck.pin)
}

// -------------------------------------------------------------------

// PassphraseRequest

// optional bool _on_device = 1 [deprecated = true];
inline bool PassphraseRequest::_internal_has__on_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PassphraseRequest::has__on_device() const {
  return _internal_has__on_device();
}
inline void PassphraseRequest::clear__on_device() {
  _impl_._on_device_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PassphraseRequest::_internal__on_device() const {
  return _impl_._on_device_;
}
inline bool PassphraseRequest::_on_device() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseRequest._on_device)
  return _internal__on_device();
}
inline void PassphraseRequest::_internal_set__on_device(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_._on_device_ = value;
}
inline void PassphraseRequest::set__on_device(bool value) {
  _internal_set__on_device(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseRequest._on_device)
}

// -------------------------------------------------------------------

// PassphraseAck

// optional string passphrase = 1;
inline bool PassphraseAck::_internal_has_passphrase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PassphraseAck::has_passphrase() const {
  return _internal_has_passphrase();
}
inline void PassphraseAck::clear_passphrase() {
  _impl_.passphrase_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PassphraseAck::passphrase() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseAck.passphrase)
  return _internal_passphrase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PassphraseAck::set_passphrase(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.passphrase_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseAck.passphrase)
}
inline std::string* PassphraseAck::mutable_passphrase() {
  std::string* _s = _internal_mutable_passphrase();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PassphraseAck.passphrase)
  return _s;
}
inline const std::string& PassphraseAck::_internal_passphrase() const {
  return _impl_.passphrase_.Get();
}
inline void PassphraseAck::_internal_set_passphrase(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.passphrase_.Set(value, GetArenaForAllocation());
}
inline std::string* PassphraseAck::_internal_mutable_passphrase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.passphrase_.Mutable(GetArenaForAllocation());
}
inline std::string* PassphraseAck::release_passphrase() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PassphraseAck.passphrase)
  if (!_internal_has_passphrase()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.passphrase_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passphrase_.IsDefault()) {
    _impl_.passphrase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PassphraseAck::set_allocated_passphrase(std::string* passphrase) {
  if (passphrase != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.passphrase_.SetAllocated(passphrase, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passphrase_.IsDefault()) {
    _impl_.passphrase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PassphraseAck.passphrase)
}

// optional bytes _state = 2 [deprecated = true];
inline bool PassphraseAck::_internal_has__state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PassphraseAck::has__state() const {
  return _internal_has__state();
}
inline void PassphraseAck::clear__state() {
  _impl_._state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PassphraseAck::_state() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseAck._state)
  return _internal__state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PassphraseAck::set__state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_._state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseAck._state)
}
inline std::string* PassphraseAck::mutable__state() {
  std::string* _s = _internal_mutable__state();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.PassphraseAck._state)
  return _s;
}
inline const std::string& PassphraseAck::_internal__state() const {
  return _impl_._state_.Get();
}
inline void PassphraseAck::_internal_set__state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_._state_.Set(value, GetArenaForAllocation());
}
inline std::string* PassphraseAck::_internal_mutable__state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_._state_.Mutable(GetArenaForAllocation());
}
inline std::string* PassphraseAck::release__state() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.PassphraseAck._state)
  if (!_internal_has__state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_._state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._state_.IsDefault()) {
    _impl_._state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PassphraseAck::set_allocated__state(std::string* _state) {
  if (_state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_._state_.SetAllocated(_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._state_.IsDefault()) {
    _impl_._state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.PassphraseAck._state)
}

// optional bool on_device = 3;
inline bool PassphraseAck::_internal_has_on_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PassphraseAck::has_on_device() const {
  return _internal_has_on_device();
}
inline void PassphraseAck::clear_on_device() {
  _impl_.on_device_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PassphraseAck::_internal_on_device() const {
  return _impl_.on_device_;
}
inline bool PassphraseAck::on_device() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.PassphraseAck.on_device)
  return _internal_on_device();
}
inline void PassphraseAck::_internal_set_on_device(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.on_device_ = value;
}
inline void PassphraseAck::set_on_device(bool value) {
  _internal_set_on_device(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.PassphraseAck.on_device)
}

// -------------------------------------------------------------------

// Deprecated_PassphraseStateRequest

// optional bytes state = 1;
inline bool Deprecated_PassphraseStateRequest::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Deprecated_PassphraseStateRequest::has_state() const {
  return _internal_has_state();
}
inline void Deprecated_PassphraseStateRequest::clear_state() {
  _impl_.state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Deprecated_PassphraseStateRequest::state() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.Deprecated_PassphraseStateRequest.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Deprecated_PassphraseStateRequest::set_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.state_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.Deprecated_PassphraseStateRequest.state)
}
inline std::string* Deprecated_PassphraseStateRequest::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.Deprecated_PassphraseStateRequest.state)
  return _s;
}
inline const std::string& Deprecated_PassphraseStateRequest::_internal_state() const {
  return _impl_.state_.Get();
}
inline void Deprecated_PassphraseStateRequest::_internal_set_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* Deprecated_PassphraseStateRequest::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* Deprecated_PassphraseStateRequest::release_state() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.Deprecated_PassphraseStateRequest.state)
  if (!_internal_has_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Deprecated_PassphraseStateRequest::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.Deprecated_PassphraseStateRequest.state)
}

// -------------------------------------------------------------------

// Deprecated_PassphraseStateAck

// -------------------------------------------------------------------

// HDNodeType

// required uint32 depth = 1;
inline bool HDNodeType::_internal_has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HDNodeType::has_depth() const {
  return _internal_has_depth();
}
inline void HDNodeType::clear_depth() {
  _impl_.depth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t HDNodeType::_internal_depth() const {
  return _impl_.depth_;
}
inline uint32_t HDNodeType::depth() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.depth)
  return _internal_depth();
}
inline void HDNodeType::_internal_set_depth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.depth_ = value;
}
inline void HDNodeType::set_depth(uint32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.depth)
}

// required uint32 fingerprint = 2;
inline bool HDNodeType::_internal_has_fingerprint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HDNodeType::has_fingerprint() const {
  return _internal_has_fingerprint();
}
inline void HDNodeType::clear_fingerprint() {
  _impl_.fingerprint_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t HDNodeType::_internal_fingerprint() const {
  return _impl_.fingerprint_;
}
inline uint32_t HDNodeType::fingerprint() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.fingerprint)
  return _internal_fingerprint();
}
inline void HDNodeType::_internal_set_fingerprint(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.fingerprint_ = value;
}
inline void HDNodeType::set_fingerprint(uint32_t value) {
  _internal_set_fingerprint(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.fingerprint)
}

// required uint32 child_num = 3;
inline bool HDNodeType::_internal_has_child_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HDNodeType::has_child_num() const {
  return _internal_has_child_num();
}
inline void HDNodeType::clear_child_num() {
  _impl_.child_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t HDNodeType::_internal_child_num() const {
  return _impl_.child_num_;
}
inline uint32_t HDNodeType::child_num() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.child_num)
  return _internal_child_num();
}
inline void HDNodeType::_internal_set_child_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.child_num_ = value;
}
inline void HDNodeType::set_child_num(uint32_t value) {
  _internal_set_child_num(value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.child_num)
}

// required bytes chain_code = 4;
inline bool HDNodeType::_internal_has_chain_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HDNodeType::has_chain_code() const {
  return _internal_has_chain_code();
}
inline void HDNodeType::clear_chain_code() {
  _impl_.chain_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDNodeType::chain_code() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.chain_code)
  return _internal_chain_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDNodeType::set_chain_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chain_code_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.chain_code)
}
inline std::string* HDNodeType::mutable_chain_code() {
  std::string* _s = _internal_mutable_chain_code();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.chain_code)
  return _s;
}
inline const std::string& HDNodeType::_internal_chain_code() const {
  return _impl_.chain_code_.Get();
}
inline void HDNodeType::_internal_set_chain_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chain_code_.Set(value, GetArenaForAllocation());
}
inline std::string* HDNodeType::_internal_mutable_chain_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chain_code_.Mutable(GetArenaForAllocation());
}
inline std::string* HDNodeType::release_chain_code() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.chain_code)
  if (!_internal_has_chain_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chain_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chain_code_.IsDefault()) {
    _impl_.chain_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HDNodeType::set_allocated_chain_code(std::string* chain_code) {
  if (chain_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chain_code_.SetAllocated(chain_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chain_code_.IsDefault()) {
    _impl_.chain_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.chain_code)
}

// optional bytes private_key = 5;
inline bool HDNodeType::_internal_has_private_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HDNodeType::has_private_key() const {
  return _internal_has_private_key();
}
inline void HDNodeType::clear_private_key() {
  _impl_.private_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HDNodeType::private_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDNodeType::set_private_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.private_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.private_key)
}
inline std::string* HDNodeType::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.private_key)
  return _s;
}
inline const std::string& HDNodeType::_internal_private_key() const {
  return _impl_.private_key_.Get();
}
inline void HDNodeType::_internal_set_private_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* HDNodeType::_internal_mutable_private_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* HDNodeType::release_private_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.private_key)
  if (!_internal_has_private_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.private_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_key_.IsDefault()) {
    _impl_.private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HDNodeType::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.private_key_.SetAllocated(private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_key_.IsDefault()) {
    _impl_.private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.private_key)
}

// required bytes public_key = 6;
inline bool HDNodeType::_internal_has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HDNodeType::has_public_key() const {
  return _internal_has_public_key();
}
inline void HDNodeType::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HDNodeType::public_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.common.HDNodeType.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HDNodeType::set_public_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hw.trezor.messages.common.HDNodeType.public_key)
}
inline std::string* HDNodeType::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.common.HDNodeType.public_key)
  return _s;
}
inline const std::string& HDNodeType::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void HDNodeType::_internal_set_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* HDNodeType::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* HDNodeType::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.common.HDNodeType.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HDNodeType::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.common.HDNodeType.public_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hw::trezor::messages::common::Failure_FailureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::Failure_FailureType>() {
  return ::hw::trezor::messages::common::Failure_FailureType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType>() {
  return ::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_descriptor();
}
template <> struct is_proto_enum< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType>() {
  return ::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2dcommon_2eproto
