// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hw {
namespace trezor {
namespace messages {
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;
const uint32_t TableStruct_messages_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\022hw.trezor.messages\032 go"
  "ogle/protobuf/descriptor.proto*\350N\n\013Messa"
  "geType\022(\n\026MessageType_Initialize\020\000\032\014\200\246\035\001"
  "\220\265\030\001\260\265\030\001\022\036\n\020MessageType_Ping\020\001\032\010\200\246\035\001\220\265\030\001"
  "\022%\n\023MessageType_Success\020\002\032\014\200\246\035\001\230\265\030\001\250\265\030\001\022"
  "%\n\023MessageType_Failure\020\003\032\014\200\246\035\001\230\265\030\001\250\265\030\001\022#"
  "\n\025MessageType_ChangePin\020\004\032\010\200\246\035\001\220\265\030\001\022$\n\026M"
  "essageType_WipeDevice\020\005\032\010\200\246\035\001\220\265\030\001\022$\n\026Mes"
  "sageType_GetEntropy\020\t\032\010\200\246\035\001\220\265\030\001\022!\n\023Messa"
  "geType_Entropy\020\n\032\010\200\246\035\001\230\265\030\001\022$\n\026MessageTyp"
  "e_LoadDevice\020\r\032\010\200\246\035\001\220\265\030\001\022%\n\027MessageType_"
  "ResetDevice\020\016\032\010\200\246\035\001\220\265\030\001\022!\n\023MessageType_S"
  "etBusy\020\020\032\010\200\246\035\001\220\265\030\001\022\"\n\024MessageType_Featur"
  "es\020\021\032\010\200\246\035\001\230\265\030\001\022*\n\034MessageType_PinMatrixR"
  "equest\020\022\032\010\200\246\035\001\230\265\030\001\022.\n\030MessageType_PinMat"
  "rixAck\020\023\032\020\200\246\035\001\220\265\030\001\260\265\030\001\300\265\030\001\022$\n\022MessageTyp"
  "e_Cancel\020\024\032\014\200\246\035\001\220\265\030\001\260\265\030\001\022$\n\026MessageType_"
  "LockDevice\020\030\032\010\200\246\035\001\220\265\030\001\022\'\n\031MessageType_Ap"
  "plySettings\020\031\032\010\200\246\035\001\220\265\030\001\022\'\n\031MessageType_B"
  "uttonRequest\020\032\032\010\200\246\035\001\230\265\030\001\022+\n\025MessageType_"
  "ButtonAck\020\033\032\020\200\246\035\001\220\265\030\001\260\265\030\001\300\265\030\001\022$\n\026Message"
  "Type_ApplyFlags\020\034\032\010\200\246\035\001\220\265\030\001\022\"\n\024MessageTy"
  "pe_GetNonce\020\037\032\010\200\246\035\001\220\265\030\001\022\037\n\021MessageType_N"
  "once\020!\032\010\200\246\035\001\230\265\030\001\022&\n\030MessageType_BackupDe"
  "vice\020\"\032\010\200\246\035\001\220\265\030\001\022(\n\032MessageType_EntropyR"
  "equest\020#\032\010\200\246\035\001\230\265\030\001\022$\n\026MessageType_Entrop"
  "yAck\020$\032\010\200\246\035\001\220\265\030\001\022+\n\035MessageType_Passphra"
  "seRequest\020)\032\010\200\246\035\001\230\265\030\001\022/\n\031MessageType_Pas"
  "sphraseAck\020*\032\020\200\246\035\001\220\265\030\001\260\265\030\001\300\265\030\001\022(\n\032Messag"
  "eType_RecoveryDevice\020-\032\010\200\246\035\001\220\265\030\001\022%\n\027Mess"
  "ageType_WordRequest\020.\032\010\200\246\035\001\230\265\030\001\022!\n\023Messa"
  "geType_WordAck\020/\032\010\200\246\035\001\220\265\030\001\022%\n\027MessageTyp"
  "e_GetFeatures\0207\032\010\200\246\035\001\220\265\030\001\022#\n\025MessageType"
  "_SdProtect\020O\032\010\200\246\035\001\220\265\030\001\022(\n\032MessageType_Ch"
  "angeWipeCode\020R\032\010\200\246\035\001\220\265\030\001\022$\n\026MessageType_"
  "EndSession\020S\032\010\200\246\035\001\220\265\030\001\022)\n\033MessageType_Do"
  "Preauthorized\020T\032\010\200\246\035\001\220\265\030\001\022.\n MessageType"
  "_PreauthorizedRequest\020U\032\010\200\246\035\001\230\265\030\001\022-\n\037Mes"
  "sageType_CancelAuthorization\020V\032\010\200\246\035\001\220\265\030\001"
  "\022,\n\036MessageType_RebootToBootloader\020W\032\010\200\246"
  "\035\001\220\265\030\001\022)\n\033MessageType_GetFirmwareHash\020X\032"
  "\010\200\246\035\001\220\265\030\001\022&\n\030MessageType_FirmwareHash\020Y\032"
  "\010\200\246\035\001\230\265\030\001\022$\n\026MessageType_UnlockPath\020]\032\010\200"
  "\246\035\001\220\265\030\001\022-\n\037MessageType_UnlockedPathReque"
  "st\020^\032\010\200\246\035\001\230\265\030\001\022#\n\031MessageType_SetU2FCoun"
  "ter\020\?\032\004\220\265\030\001\022\'\n\035MessageType_GetNextU2FCou"
  "nter\020P\032\004\220\265\030\001\022$\n\032MessageType_NextU2FCount"
  "er\020Q\032\004\230\265\030\001\0225\n-MessageType_Deprecated_Pas"
  "sphraseStateRequest\020M\032\002\010\001\0221\n)MessageType"
  "_Deprecated_PassphraseStateAck\020N\032\002\010\001\022+\n\031"
  "MessageType_FirmwareErase\020\006\032\014\200\246\035\001\220\265\030\001\270\265\030"
  "\001\022,\n\032MessageType_FirmwareUpload\020\007\032\014\200\246\035\001\220"
  "\265\030\001\270\265\030\001\022-\n\033MessageType_FirmwareRequest\020\010"
  "\032\014\200\246\035\001\230\265\030\001\270\265\030\001\022&\n\024MessageType_SelfTest\020 "
  "\032\014\200\246\035\001\220\265\030\001\270\265\030\001\022&\n\030MessageType_GetPublicK"
  "ey\020\013\032\010\200\246\035\001\220\265\030\001\022#\n\025MessageType_PublicKey\020"
  "\014\032\010\200\246\035\001\230\265\030\001\022 \n\022MessageType_SignTx\020\017\032\010\200\246\035"
  "\001\220\265\030\001\022#\n\025MessageType_TxRequest\020\025\032\010\200\246\035\001\230\265"
  "\030\001\022\037\n\021MessageType_TxAck\020\026\032\010\200\246\035\001\220\265\030\001\022$\n\026M"
  "essageType_GetAddress\020\035\032\010\200\246\035\001\220\265\030\001\022!\n\023Mes"
  "sageType_Address\020\036\032\010\200\246\035\001\230\265\030\001\022)\n\037MessageT"
  "ype_TxAckPaymentRequest\020%\032\004\220\265\030\001\022%\n\027Messa"
  "geType_SignMessage\020&\032\010\200\246\035\001\220\265\030\001\022\'\n\031Messag"
  "eType_VerifyMessage\020\'\032\010\200\246\035\001\220\265\030\001\022*\n\034Messa"
  "geType_MessageSignature\020(\032\010\200\246\035\001\230\265\030\001\022(\n\032M"
  "essageType_GetOwnershipId\020+\032\010\200\246\035\001\220\265\030\001\022%\n"
  "\027MessageType_OwnershipId\020,\032\010\200\246\035\001\230\265\030\001\022+\n\035"
  "MessageType_GetOwnershipProof\0201\032\010\200\246\035\001\220\265\030"
  "\001\022(\n\032MessageType_OwnershipProof\0202\032\010\200\246\035\001\230"
  "\265\030\001\022+\n\035MessageType_AuthorizeCoinJoin\0203\032\010"
  "\200\246\035\001\220\265\030\001\022(\n\032MessageType_CipherKeyValue\020\027"
  "\032\010\200\246\035\001\220\265\030\001\022*\n\034MessageType_CipheredKeyVal"
  "ue\0200\032\010\200\246\035\001\230\265\030\001\022&\n\030MessageType_SignIdenti"
  "ty\0205\032\010\200\246\035\001\220\265\030\001\022(\n\032MessageType_SignedIden"
  "tity\0206\032\010\200\246\035\001\230\265\030\001\022+\n\035MessageType_GetECDHS"
  "essionKey\020=\032\010\200\246\035\001\220\265\030\001\022(\n\032MessageType_ECD"
  "HSessionKey\020>\032\010\200\246\035\001\230\265\030\001\022$\n\026MessageType_C"
  "osiCommit\020G\032\010\200\246\035\001\220\265\030\001\022(\n\032MessageType_Cos"
  "iCommitment\020H\032\010\200\246\035\001\230\265\030\001\022\"\n\024MessageType_C"
  "osiSign\020I\032\010\200\246\035\001\220\265\030\001\022\'\n\031MessageType_CosiS"
  "ignature\020J\032\010\200\246\035\001\230\265\030\001\0223\n\035MessageType_Debu"
  "gLinkDecision\020d\032\020\200\246\035\001\240\265\030\001\260\265\030\001\300\265\030\001\022/\n\035Mes"
  "sageType_DebugLinkGetState\020e\032\014\200\246\035\001\240\265\030\001\260\265"
  "\030\001\022(\n\032MessageType_DebugLinkState\020f\032\010\200\246\035\001"
  "\250\265\030\001\022\'\n\031MessageType_DebugLinkStop\020g\032\010\200\246\035"
  "\001\240\265\030\001\022&\n\030MessageType_DebugLinkLog\020h\032\010\200\246\035"
  "\001\250\265\030\001\022-\n\037MessageType_DebugLinkMemoryRead"
  "\020n\032\010\200\246\035\001\240\265\030\001\022)\n\033MessageType_DebugLinkMem"
  "ory\020o\032\010\200\246\035\001\250\265\030\001\022.\n MessageType_DebugLink"
  "MemoryWrite\020p\032\010\200\246\035\001\240\265\030\001\022-\n\037MessageType_D"
  "ebugLinkFlashErase\020q\032\010\200\246\035\001\240\265\030\001\022*\n\033Messag"
  "eType_DebugLinkLayout\020\251F\032\010\200\246\035\001\250\265\030\001\0220\n!Me"
  "ssageType_DebugLinkReseedRandom\020\252F\032\010\200\246\035\001"
  "\240\265\030\001\0220\n!MessageType_DebugLinkRecordScree"
  "n\020\253F\032\010\200\246\035\001\240\265\030\001\022/\n MessageType_DebugLinkE"
  "raseSdCard\020\255F\032\010\200\246\035\001\240\265\030\001\022/\n MessageType_D"
  "ebugLinkWatchLayout\020\256F\032\010\200\246\035\001\240\265\030\001\022+\n Mess"
  "ageType_EthereumGetPublicKey\020\302\003\032\004\220\265\030\001\022(\n"
  "\035MessageType_EthereumPublicKey\020\303\003\032\004\230\265\030\001\022"
  "(\n\036MessageType_EthereumGetAddress\0208\032\004\220\265\030"
  "\001\022%\n\033MessageType_EthereumAddress\0209\032\004\230\265\030\001"
  "\022$\n\032MessageType_EthereumSignTx\020:\032\004\220\265\030\001\022,"
  "\n!MessageType_EthereumSignTxEIP1559\020\304\003\032\004"
  "\220\265\030\001\022\'\n\035MessageType_EthereumTxRequest\020;\032"
  "\004\230\265\030\001\022#\n\031MessageType_EthereumTxAck\020<\032\004\220\265"
  "\030\001\022)\n\037MessageType_EthereumSignMessage\020@\032"
  "\004\220\265\030\001\022+\n!MessageType_EthereumVerifyMessa"
  "ge\020A\032\004\220\265\030\001\022.\n$MessageType_EthereumMessag"
  "eSignature\020B\032\004\230\265\030\001\022,\n!MessageType_Ethere"
  "umSignTypedData\020\320\003\032\004\220\265\030\001\0225\n*MessageType_"
  "EthereumTypedDataStructRequest\020\321\003\032\004\230\265\030\001\022"
  "1\n&MessageType_EthereumTypedDataStructAc"
  "k\020\322\003\032\004\220\265\030\001\0224\n)MessageType_EthereumTypedD"
  "ataValueRequest\020\323\003\032\004\230\265\030\001\0220\n%MessageType_"
  "EthereumTypedDataValueAck\020\324\003\032\004\220\265\030\001\0221\n&Me"
  "ssageType_EthereumTypedDataSignature\020\325\003\032"
  "\004\230\265\030\001\022,\n!MessageType_EthereumSignTypedHa"
  "sh\020\326\003\032\004\220\265\030\001\022#\n\031MessageType_NEMGetAddress"
  "\020C\032\004\220\265\030\001\022 \n\026MessageType_NEMAddress\020D\032\004\230\265"
  "\030\001\022\037\n\025MessageType_NEMSignTx\020E\032\004\220\265\030\001\022!\n\027M"
  "essageType_NEMSignedTx\020F\032\004\230\265\030\001\022\'\n\035Messag"
  "eType_NEMDecryptMessage\020K\032\004\220\265\030\001\022)\n\037Messa"
  "geType_NEMDecryptedMessage\020L\032\004\230\265\030\001\022&\n\033Me"
  "ssageType_TezosGetAddress\020\226\001\032\004\220\265\030\001\022#\n\030Me"
  "ssageType_TezosAddress\020\227\001\032\004\230\265\030\001\022\"\n\027Messa"
  "geType_TezosSignTx\020\230\001\032\004\220\265\030\001\022$\n\031MessageTy"
  "pe_TezosSignedTx\020\231\001\032\004\230\265\030\001\022(\n\035MessageType"
  "_TezosGetPublicKey\020\232\001\032\004\220\265\030\001\022%\n\032MessageTy"
  "pe_TezosPublicKey\020\233\001\032\004\230\265\030\001\022$\n\031MessageTyp"
  "e_StellarSignTx\020\312\001\032\004\220\265\030\001\022)\n\036MessageType_"
  "StellarTxOpRequest\020\313\001\032\004\230\265\030\001\022(\n\035MessageTy"
  "pe_StellarGetAddress\020\317\001\032\004\220\265\030\001\022%\n\032Message"
  "Type_StellarAddress\020\320\001\032\004\230\265\030\001\022-\n\"MessageT"
  "ype_StellarCreateAccountOp\020\322\001\032\004\220\265\030\001\022\'\n\034M"
  "essageType_StellarPaymentOp\020\323\001\032\004\220\265\030\001\0228\n-"
  "MessageType_StellarPathPaymentStrictRece"
  "iveOp\020\324\001\032\004\220\265\030\001\022/\n$MessageType_StellarMan"
  "ageSellOfferOp\020\325\001\032\004\220\265\030\001\0226\n+MessageType_S"
  "tellarCreatePassiveSellOfferOp\020\326\001\032\004\220\265\030\001\022"
  "*\n\037MessageType_StellarSetOptionsOp\020\327\001\032\004\220"
  "\265\030\001\022+\n MessageType_StellarChangeTrustOp\020"
  "\330\001\032\004\220\265\030\001\022*\n\037MessageType_StellarAllowTrus"
  "tOp\020\331\001\032\004\220\265\030\001\022,\n!MessageType_StellarAccou"
  "ntMergeOp\020\332\001\032\004\220\265\030\001\022*\n\037MessageType_Stella"
  "rManageDataOp\020\334\001\032\004\220\265\030\001\022,\n!MessageType_St"
  "ellarBumpSequenceOp\020\335\001\032\004\220\265\030\001\022.\n#MessageT"
  "ype_StellarManageBuyOfferOp\020\336\001\032\004\220\265\030\001\0225\n*"
  "MessageType_StellarPathPaymentStrictSend"
  "Op\020\337\001\032\004\220\265\030\001\022&\n\033MessageType_StellarSigned"
  "Tx\020\346\001\032\004\230\265\030\001\022*\n\037MessageType_CardanoGetPub"
  "licKey\020\261\002\032\004\220\265\030\001\022\'\n\034MessageType_CardanoPu"
  "blicKey\020\262\002\032\004\230\265\030\001\022(\n\035MessageType_CardanoG"
  "etAddress\020\263\002\032\004\220\265\030\001\022%\n\032MessageType_Cardan"
  "oAddress\020\264\002\032\004\230\265\030\001\022\'\n\034MessageType_Cardano"
  "TxItemAck\020\271\002\032\004\230\265\030\001\0227\n,MessageType_Cardan"
  "oTxAuxiliaryDataSupplement\020\272\002\032\004\230\265\030\001\022.\n#M"
  "essageType_CardanoTxWitnessRequest\020\273\002\032\004\220"
  "\265\030\001\022/\n$MessageType_CardanoTxWitnessRespo"
  "nse\020\274\002\032\004\230\265\030\001\022\'\n\034MessageType_CardanoTxHos"
  "tAck\020\275\002\032\004\220\265\030\001\022(\n\035MessageType_CardanoTxBo"
  "dyHash\020\276\002\032\004\230\265\030\001\022,\n!MessageType_CardanoSi"
  "gnTxFinished\020\277\002\032\004\230\265\030\001\022(\n\035MessageType_Car"
  "danoSignTxInit\020\300\002\032\004\220\265\030\001\022%\n\032MessageType_C"
  "ardanoTxInput\020\301\002\032\004\220\265\030\001\022&\n\033MessageType_Ca"
  "rdanoTxOutput\020\302\002\032\004\220\265\030\001\022(\n\035MessageType_Ca"
  "rdanoAssetGroup\020\303\002\032\004\220\265\030\001\022#\n\030MessageType_"
  "CardanoToken\020\304\002\032\004\220\265\030\001\022+\n MessageType_Car"
  "danoTxCertificate\020\305\002\032\004\220\265\030\001\022*\n\037MessageTyp"
  "e_CardanoTxWithdrawal\020\306\002\032\004\220\265\030\001\022-\n\"Messag"
  "eType_CardanoTxAuxiliaryData\020\307\002\032\004\220\265\030\001\022\'\n"
  "\034MessageType_CardanoPoolOwner\020\310\002\032\004\220\265\030\001\0221"
  "\n&MessageType_CardanoPoolRelayParameters"
  "\020\311\002\032\004\220\265\030\001\0221\n&MessageType_CardanoGetNativ"
  "eScriptHash\020\312\002\032\004\220\265\030\001\022.\n#MessageType_Card"
  "anoNativeScriptHash\020\313\002\032\004\230\265\030\001\022$\n\031MessageT"
  "ype_CardanoTxMint\020\314\002\032\004\220\265\030\001\022/\n$MessageTyp"
  "e_CardanoTxCollateralInput\020\315\002\032\004\220\265\030\001\022.\n#M"
  "essageType_CardanoTxRequiredSigner\020\316\002\032\004\220"
  "\265\030\001\0220\n%MessageType_CardanoTxInlineDatumC"
  "hunk\020\317\002\032\004\220\265\030\001\0224\n)MessageType_CardanoTxRe"
  "ferenceScriptChunk\020\320\002\032\004\220\265\030\001\022.\n#MessageTy"
  "pe_CardanoTxReferenceInput\020\321\002\032\004\220\265\030\001\022\'\n\034M"
  "essageType_RippleGetAddress\020\220\003\032\004\220\265\030\001\022$\n\031"
  "MessageType_RippleAddress\020\221\003\032\004\230\265\030\001\022#\n\030Me"
  "ssageType_RippleSignTx\020\222\003\032\004\220\265\030\001\022%\n\032Messa"
  "geType_RippleSignedTx\020\223\003\032\004\220\265\030\001\0223\n(Messag"
  "eType_MoneroTransactionInitRequest\020\365\003\032\004\230"
  "\265\030\001\022/\n$MessageType_MoneroTransactionInit"
  "Ack\020\366\003\032\004\230\265\030\001\0227\n,MessageType_MoneroTransa"
  "ctionSetInputRequest\020\367\003\032\004\230\265\030\001\0223\n(Message"
  "Type_MoneroTransactionSetInputAck\020\370\003\032\004\230\265"
  "\030\001\0228\n-MessageType_MoneroTransactionInput"
  "ViniRequest\020\373\003\032\004\230\265\030\001\0224\n)MessageType_Mone"
  "roTransactionInputViniAck\020\374\003\032\004\230\265\030\001\022;\n0Me"
  "ssageType_MoneroTransactionAllInputsSetR"
  "equest\020\375\003\032\004\230\265\030\001\0227\n,MessageType_MoneroTra"
  "nsactionAllInputsSetAck\020\376\003\032\004\230\265\030\001\0228\n-Mess"
  "ageType_MoneroTransactionSetOutputReques"
  "t\020\377\003\032\004\230\265\030\001\0224\n)MessageType_MoneroTransact"
  "ionSetOutputAck\020\200\004\032\004\230\265\030\001\0228\n-MessageType_"
  "MoneroTransactionAllOutSetRequest\020\201\004\032\004\230\265"
  "\030\001\0224\n)MessageType_MoneroTransactionAllOu"
  "tSetAck\020\202\004\032\004\230\265\030\001\0228\n-MessageType_MoneroTr"
  "ansactionSignInputRequest\020\203\004\032\004\230\265\030\001\0224\n)Me"
  "ssageType_MoneroTransactionSignInputAck\020"
  "\204\004\032\004\230\265\030\001\0224\n)MessageType_MoneroTransactio"
  "nFinalRequest\020\205\004\032\004\230\265\030\001\0220\n%MessageType_Mo"
  "neroTransactionFinalAck\020\206\004\032\004\230\265\030\001\0226\n+Mess"
  "ageType_MoneroKeyImageExportInitRequest\020"
  "\222\004\032\004\230\265\030\001\0222\n\'MessageType_MoneroKeyImageEx"
  "portInitAck\020\223\004\032\004\230\265\030\001\0224\n)MessageType_Mone"
  "roKeyImageSyncStepRequest\020\224\004\032\004\230\265\030\001\0220\n%Me"
  "ssageType_MoneroKeyImageSyncStepAck\020\225\004\032\004"
  "\230\265\030\001\0225\n*MessageType_MoneroKeyImageSyncFi"
  "nalRequest\020\226\004\032\004\230\265\030\001\0221\n&MessageType_Moner"
  "oKeyImageSyncFinalAck\020\227\004\032\004\230\265\030\001\022\'\n\034Messag"
  "eType_MoneroGetAddress\020\234\004\032\004\220\265\030\001\022$\n\031Messa"
  "geType_MoneroAddress\020\235\004\032\004\230\265\030\001\022(\n\035Message"
  "Type_MoneroGetWatchKey\020\236\004\032\004\220\265\030\001\022%\n\032Messa"
  "geType_MoneroWatchKey\020\237\004\032\004\230\265\030\001\022-\n\"Messag"
  "eType_DebugMoneroDiagRequest\020\242\004\032\004\220\265\030\001\022)\n"
  "\036MessageType_DebugMoneroDiagAck\020\243\004\032\004\230\265\030\001"
  "\022,\n!MessageType_MoneroGetTxKeyRequest\020\246\004"
  "\032\004\220\265\030\001\022(\n\035MessageType_MoneroGetTxKeyAck\020"
  "\247\004\032\004\230\265\030\001\0224\n)MessageType_MoneroLiveRefres"
  "hStartRequest\020\250\004\032\004\220\265\030\001\0220\n%MessageType_Mo"
  "neroLiveRefreshStartAck\020\251\004\032\004\230\265\030\001\0223\n(Mess"
  "ageType_MoneroLiveRefreshStepRequest\020\252\004\032"
  "\004\220\265\030\001\022/\n$MessageType_MoneroLiveRefreshSt"
  "epAck\020\253\004\032\004\230\265\030\001\0224\n)MessageType_MoneroLive"
  "RefreshFinalRequest\020\254\004\032\004\220\265\030\001\0220\n%MessageT"
  "ype_MoneroLiveRefreshFinalAck\020\255\004\032\004\230\265\030\001\022&"
  "\n\033MessageType_EosGetPublicKey\020\330\004\032\004\220\265\030\001\022#"
  "\n\030MessageType_EosPublicKey\020\331\004\032\004\230\265\030\001\022 \n\025M"
  "essageType_EosSignTx\020\332\004\032\004\220\265\030\001\022)\n\036Message"
  "Type_EosTxActionRequest\020\333\004\032\004\230\265\030\001\022%\n\032Mess"
  "ageType_EosTxActionAck\020\334\004\032\004\220\265\030\001\022\"\n\027Messa"
  "geType_EosSignedTx\020\335\004\032\004\230\265\030\001\022(\n\035MessageTy"
  "pe_BinanceGetAddress\020\274\005\032\004\220\265\030\001\022%\n\032Message"
  "Type_BinanceAddress\020\275\005\032\004\230\265\030\001\022*\n\037MessageT"
  "ype_BinanceGetPublicKey\020\276\005\032\004\220\265\030\001\022\'\n\034Mess"
  "ageType_BinancePublicKey\020\277\005\032\004\230\265\030\001\022$\n\031Mes"
  "sageType_BinanceSignTx\020\300\005\032\004\220\265\030\001\022\'\n\034Messa"
  "geType_BinanceTxRequest\020\301\005\032\004\230\265\030\001\022)\n\036Mess"
  "ageType_BinanceTransferMsg\020\302\005\032\004\220\265\030\001\022&\n\033M"
  "essageType_BinanceOrderMsg\020\303\005\032\004\220\265\030\001\022\'\n\034M"
  "essageType_BinanceCancelMsg\020\304\005\032\004\220\265\030\001\022&\n\033"
  "MessageType_BinanceSignedTx\020\305\005\032\004\230\265\030\001\0226\n+"
  "MessageType_WebAuthnListResidentCredenti"
  "als\020\240\006\032\004\220\265\030\001\022*\n\037MessageType_WebAuthnCred"
  "entials\020\241\006\032\004\230\265\030\001\0224\n)MessageType_WebAuthn"
  "AddResidentCredential\020\242\006\032\004\220\265\030\001\0227\n,Messag"
  "eType_WebAuthnRemoveResidentCredential\020\243"
  "\006\032\004\220\265\030\001\032\004\310\363\030\001\"\004\010Z\020\\\"\004\010r\020z\"\006\010\254\002\020\260\002\"\006\010\265\002\020\270"
  "\002:4\n\007wire_in\022!.google.protobuf.EnumValue"
  "Options\030\322\206\003 \001(\010:5\n\010wire_out\022!.google.pro"
  "tobuf.EnumValueOptions\030\323\206\003 \001(\010::\n\rwire_d"
  "ebug_in\022!.google.protobuf.EnumValueOptio"
  "ns\030\324\206\003 \001(\010:;\n\016wire_debug_out\022!.google.pr"
  "otobuf.EnumValueOptions\030\325\206\003 \001(\010:6\n\twire_"
  "tiny\022!.google.protobuf.EnumValueOptions\030"
  "\326\206\003 \001(\010:<\n\017wire_bootloader\022!.google.prot"
  "obuf.EnumValueOptions\030\327\206\003 \001(\010:8\n\013wire_no"
  "_fsm\022!.google.protobuf.EnumValueOptions\030"
  "\330\206\003 \001(\010:9\n\014bitcoin_only\022!.google.protobu"
  "f.EnumValueOptions\030\340\324\003 \001(\010:\?\n\027has_bitcoi"
  "n_only_values\022\034.google.protobuf.EnumOpti"
  "ons\030\271\216\003 \001(\010:\?\n\024experimental_message\022\037.go"
  "ogle.protobuf.MessageOptions\030\241\226\003 \001(\010:4\n\t"
  "wire_type\022\037.google.protobuf.MessageOptio"
  "ns\030\242\226\003 \001(\r:;\n\022experimental_field\022\035.googl"
  "e.protobuf.FieldOptions\030\211\236\003 \001(\010:\?\n\027inclu"
  "de_in_bitcoin_only\022\034.google.protobuf.Fil"
  "eOptions\030\340\324\003 \001(\010B8\n#com.satoshilabs.trez"
  "or.lib.protobufB\rTrezorMessage\200\246\035\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_messages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 10994, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_deps, 1, 0,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    nullptr, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace hw {
namespace trezor {
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 93:
    case 94:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 110:
    case 111:
    case 112:
    case 113:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 202:
    case 203:
    case 207:
    case 208:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 220:
    case 221:
    case 222:
    case 223:
    case 230:
    case 305:
    case 306:
    case 307:
    case 308:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 400:
    case 401:
    case 402:
    case 403:
    case 450:
    case 451:
    case 452:
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 469:
    case 470:
    case 501:
    case 502:
    case 503:
    case 504:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 540:
    case 541:
    case 542:
    case 543:
    case 546:
    case 547:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 800:
    case 801:
    case 802:
    case 803:
    case 9001:
    case 9002:
    case 9003:
    case 9005:
    case 9006:
      return true;
    default:
      return false;
  }
}

PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_in(kWireInFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_out(kWireOutFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_debug_in(kWireDebugInFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_debug_out(kWireDebugOutFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_tiny(kWireTinyFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_bootloader(kWireBootloaderFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  wire_no_fsm(kWireNoFsmFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  bitcoin_only(kBitcoinOnlyFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  has_bitcoin_only_values(kHasBitcoinOnlyValuesFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  experimental_message(kExperimentalMessageFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false>
  wire_type(kWireTypeFieldNumber, 0u, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  experimental_field(kExperimentalFieldFieldNumber, false, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  include_in_bitcoin_only(kIncludeInBitcoinOnlyFieldNumber, false, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
