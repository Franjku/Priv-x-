// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-common.proto

#include "messages-common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hw {
namespace trezor {
namespace messages {
namespace common {
PROTOBUF_CONSTEXPR Success::Success(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuccessDefaultTypeInternal() {}
  union {
    Success _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuccessDefaultTypeInternal _Success_default_instance_;
PROTOBUF_CONSTEXPR Failure::Failure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/1} {}
struct FailureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FailureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FailureDefaultTypeInternal() {}
  union {
    Failure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FailureDefaultTypeInternal _Failure_default_instance_;
PROTOBUF_CONSTEXPR ButtonRequest::ButtonRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pages_)*/0u
  , /*decltype(_impl_.code_)*/1} {}
struct ButtonRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonRequestDefaultTypeInternal() {}
  union {
    ButtonRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonRequestDefaultTypeInternal _ButtonRequest_default_instance_;
PROTOBUF_CONSTEXPR ButtonAck::ButtonAck(
    ::_pbi::ConstantInitialized) {}
struct ButtonAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ButtonAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ButtonAckDefaultTypeInternal() {}
  union {
    ButtonAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ButtonAckDefaultTypeInternal _ButtonAck_default_instance_;
PROTOBUF_CONSTEXPR PinMatrixRequest::PinMatrixRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/1} {}
struct PinMatrixRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinMatrixRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinMatrixRequestDefaultTypeInternal() {}
  union {
    PinMatrixRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinMatrixRequestDefaultTypeInternal _PinMatrixRequest_default_instance_;
PROTOBUF_CONSTEXPR PinMatrixAck::PinMatrixAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PinMatrixAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinMatrixAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinMatrixAckDefaultTypeInternal() {}
  union {
    PinMatrixAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinMatrixAckDefaultTypeInternal _PinMatrixAck_default_instance_;
PROTOBUF_CONSTEXPR PassphraseRequest::PassphraseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._on_device_)*/false} {}
struct PassphraseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassphraseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassphraseRequestDefaultTypeInternal() {}
  union {
    PassphraseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassphraseRequestDefaultTypeInternal _PassphraseRequest_default_instance_;
PROTOBUF_CONSTEXPR PassphraseAck::PassphraseAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.passphrase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.on_device_)*/false} {}
struct PassphraseAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassphraseAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassphraseAckDefaultTypeInternal() {}
  union {
    PassphraseAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassphraseAckDefaultTypeInternal _PassphraseAck_default_instance_;
PROTOBUF_CONSTEXPR Deprecated_PassphraseStateRequest::Deprecated_PassphraseStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Deprecated_PassphraseStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Deprecated_PassphraseStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Deprecated_PassphraseStateRequestDefaultTypeInternal() {}
  union {
    Deprecated_PassphraseStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Deprecated_PassphraseStateRequestDefaultTypeInternal _Deprecated_PassphraseStateRequest_default_instance_;
PROTOBUF_CONSTEXPR Deprecated_PassphraseStateAck::Deprecated_PassphraseStateAck(
    ::_pbi::ConstantInitialized) {}
struct Deprecated_PassphraseStateAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Deprecated_PassphraseStateAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Deprecated_PassphraseStateAckDefaultTypeInternal() {}
  union {
    Deprecated_PassphraseStateAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Deprecated_PassphraseStateAckDefaultTypeInternal _Deprecated_PassphraseStateAck_default_instance_;
PROTOBUF_CONSTEXPR HDNodeType::HDNodeType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.private_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.depth_)*/0u
  , /*decltype(_impl_.fingerprint_)*/0u
  , /*decltype(_impl_.child_num_)*/0u} {}
struct HDNodeTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HDNodeTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HDNodeTypeDefaultTypeInternal() {}
  union {
    HDNodeType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HDNodeTypeDefaultTypeInternal _HDNodeType_default_instance_;
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static ::_pb::Metadata file_level_metadata_messages_2dcommon_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2dcommon_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2dcommon_2eproto = nullptr;

const uint32_t TableStruct_messages_2dcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Success, _impl_.message_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Failure, _impl_.message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonRequest, _impl_.pages_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::ButtonAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixRequest, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PinMatrixAck, _impl_.pin_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseRequest, _impl_._on_device_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _impl_.passphrase_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _impl_._state_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::PassphraseAck, _impl_.on_device_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest, _impl_.state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::Deprecated_PassphraseStateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.fingerprint_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.child_num_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.chain_code_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.private_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::common::HDNodeType, _impl_.public_key_),
  3,
  4,
  5,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::hw::trezor::messages::common::Success)},
  { 8, 16, -1, sizeof(::hw::trezor::messages::common::Failure)},
  { 18, 26, -1, sizeof(::hw::trezor::messages::common::ButtonRequest)},
  { 28, -1, -1, sizeof(::hw::trezor::messages::common::ButtonAck)},
  { 34, 41, -1, sizeof(::hw::trezor::messages::common::PinMatrixRequest)},
  { 42, 49, -1, sizeof(::hw::trezor::messages::common::PinMatrixAck)},
  { 50, 57, -1, sizeof(::hw::trezor::messages::common::PassphraseRequest)},
  { 58, 67, -1, sizeof(::hw::trezor::messages::common::PassphraseAck)},
  { 70, 77, -1, sizeof(::hw::trezor::messages::common::Deprecated_PassphraseStateRequest)},
  { 78, -1, -1, sizeof(::hw::trezor::messages::common::Deprecated_PassphraseStateAck)},
  { 84, 96, -1, sizeof(::hw::trezor::messages::common::HDNodeType)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hw::trezor::messages::common::_Success_default_instance_._instance,
  &::hw::trezor::messages::common::_Failure_default_instance_._instance,
  &::hw::trezor::messages::common::_ButtonRequest_default_instance_._instance,
  &::hw::trezor::messages::common::_ButtonAck_default_instance_._instance,
  &::hw::trezor::messages::common::_PinMatrixRequest_default_instance_._instance,
  &::hw::trezor::messages::common::_PinMatrixAck_default_instance_._instance,
  &::hw::trezor::messages::common::_PassphraseRequest_default_instance_._instance,
  &::hw::trezor::messages::common::_PassphraseAck_default_instance_._instance,
  &::hw::trezor::messages::common::_Deprecated_PassphraseStateRequest_default_instance_._instance,
  &::hw::trezor::messages::common::_Deprecated_PassphraseStateAck_default_instance_._instance,
  &::hw::trezor::messages::common::_HDNodeType_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2dcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025messages-common.proto\022\031hw.trezor.messa"
  "ges.common\032\016messages.proto\"\034\n\007Success\022\021\n"
  "\007message\030\001 \001(\t:\000\"\200\004\n\007Failure\022<\n\004code\030\001 \001"
  "(\0162..hw.trezor.messages.common.Failure.F"
  "ailureType\022\017\n\007message\030\002 \001(\t\"\245\003\n\013FailureT"
  "ype\022\035\n\031Failure_UnexpectedMessage\020\001\022\032\n\026Fa"
  "ilure_ButtonExpected\020\002\022\025\n\021Failure_DataEr"
  "ror\020\003\022\033\n\027Failure_ActionCancelled\020\004\022\027\n\023Fa"
  "ilure_PinExpected\020\005\022\030\n\024Failure_PinCancel"
  "led\020\006\022\026\n\022Failure_PinInvalid\020\007\022\034\n\030Failure"
  "_InvalidSignature\020\010\022\030\n\024Failure_ProcessEr"
  "ror\020\t\022\032\n\026Failure_NotEnoughFunds\020\n\022\032\n\026Fai"
  "lure_NotInitialized\020\013\022\027\n\023Failure_PinMism"
  "atch\020\014\022\034\n\030Failure_WipeCodeMismatch\020\r\022\032\n\026"
  "Failure_InvalidSession\020\016\022\031\n\025Failure_Firm"
  "wareError\020c\"\204\006\n\rButtonRequest\022H\n\004code\030\001 "
  "\001(\0162:.hw.trezor.messages.common.ButtonRe"
  "quest.ButtonRequestType\022\r\n\005pages\030\002 \001(\r\"\231"
  "\005\n\021ButtonRequestType\022\027\n\023ButtonRequest_Ot"
  "her\020\001\022\"\n\036ButtonRequest_FeeOverThreshold\020"
  "\002\022\037\n\033ButtonRequest_ConfirmOutput\020\003\022\035\n\031Bu"
  "ttonRequest_ResetDevice\020\004\022\035\n\031ButtonReque"
  "st_ConfirmWord\020\005\022\034\n\030ButtonRequest_WipeDe"
  "vice\020\006\022\035\n\031ButtonRequest_ProtectCall\020\007\022\030\n"
  "\024ButtonRequest_SignTx\020\010\022\037\n\033ButtonRequest"
  "_FirmwareCheck\020\t\022\031\n\025ButtonRequest_Addres"
  "s\020\n\022\033\n\027ButtonRequest_PublicKey\020\013\022#\n\037Butt"
  "onRequest_MnemonicWordCount\020\014\022\037\n\033ButtonR"
  "equest_MnemonicInput\020\r\0220\n(_Deprecated_Bu"
  "ttonRequest_PassphraseType\020\016\032\002\010\001\022\'\n#Butt"
  "onRequest_UnknownDerivationPath\020\017\022\"\n\036But"
  "tonRequest_RecoveryHomepage\020\020\022\031\n\025ButtonR"
  "equest_Success\020\021\022\031\n\025ButtonRequest_Warnin"
  "g\020\022\022!\n\035ButtonRequest_PassphraseEntry\020\023\022\032"
  "\n\026ButtonRequest_PinEntry\020\024\"\013\n\tButtonAck\""
  "\265\002\n\020PinMatrixRequest\022N\n\004type\030\001 \001(\0162@.hw."
  "trezor.messages.common.PinMatrixRequest."
  "PinMatrixRequestType\"\320\001\n\024PinMatrixReques"
  "tType\022 \n\034PinMatrixRequestType_Current\020\001\022"
  "!\n\035PinMatrixRequestType_NewFirst\020\002\022\"\n\036Pi"
  "nMatrixRequestType_NewSecond\020\003\022&\n\"PinMat"
  "rixRequestType_WipeCodeFirst\020\004\022\'\n#PinMat"
  "rixRequestType_WipeCodeSecond\020\005\"\033\n\014PinMa"
  "trixAck\022\013\n\003pin\030\001 \002(\t\"+\n\021PassphraseReques"
  "t\022\026\n\n_on_device\030\001 \001(\010B\002\030\001\"J\n\rPassphraseA"
  "ck\022\022\n\npassphrase\030\001 \001(\t\022\022\n\006_state\030\002 \001(\014B\002"
  "\030\001\022\021\n\ton_device\030\003 \001(\010\"6\n!Deprecated_Pass"
  "phraseStateRequest\022\r\n\005state\030\001 \001(\014:\002\030\001\"#\n"
  "\035Deprecated_PassphraseStateAck:\002\030\001\"\200\001\n\nH"
  "DNodeType\022\r\n\005depth\030\001 \002(\r\022\023\n\013fingerprint\030"
  "\002 \002(\r\022\021\n\tchild_num\030\003 \002(\r\022\022\n\nchain_code\030\004"
  " \002(\014\022\023\n\013private_key\030\005 \001(\014\022\022\n\npublic_key\030"
  "\006 \002(\014B>\n#com.satoshilabs.trezor.lib.prot"
  "obufB\023TrezorMessageCommon\200\246\035\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_messages_2dcommon_2eproto_deps[1] = {
  &::descriptor_table_messages_2eproto,
};
static ::_pbi::once_flag descriptor_table_messages_2dcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2dcommon_2eproto = {
    false, false, 2149, descriptor_table_protodef_messages_2dcommon_2eproto,
    "messages-common.proto",
    &descriptor_table_messages_2dcommon_2eproto_once, descriptor_table_messages_2dcommon_2eproto_deps, 1, 11,
    schemas, file_default_instances, TableStruct_messages_2dcommon_2eproto::offsets,
    file_level_metadata_messages_2dcommon_2eproto, file_level_enum_descriptors_messages_2dcommon_2eproto,
    file_level_service_descriptors_messages_2dcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2dcommon_2eproto_getter() {
  return &descriptor_table_messages_2dcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2dcommon_2eproto(&descriptor_table_messages_2dcommon_2eproto);
namespace hw {
namespace trezor {
namespace messages {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Failure_FailureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[0];
}
bool Failure_FailureType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 99:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Failure_FailureType Failure::Failure_UnexpectedMessage;
constexpr Failure_FailureType Failure::Failure_ButtonExpected;
constexpr Failure_FailureType Failure::Failure_DataError;
constexpr Failure_FailureType Failure::Failure_ActionCancelled;
constexpr Failure_FailureType Failure::Failure_PinExpected;
constexpr Failure_FailureType Failure::Failure_PinCancelled;
constexpr Failure_FailureType Failure::Failure_PinInvalid;
constexpr Failure_FailureType Failure::Failure_InvalidSignature;
constexpr Failure_FailureType Failure::Failure_ProcessError;
constexpr Failure_FailureType Failure::Failure_NotEnoughFunds;
constexpr Failure_FailureType Failure::Failure_NotInitialized;
constexpr Failure_FailureType Failure::Failure_PinMismatch;
constexpr Failure_FailureType Failure::Failure_WipeCodeMismatch;
constexpr Failure_FailureType Failure::Failure_InvalidSession;
constexpr Failure_FailureType Failure::Failure_FirmwareError;
constexpr Failure_FailureType Failure::FailureType_MIN;
constexpr Failure_FailureType Failure::FailureType_MAX;
constexpr int Failure::FailureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonRequest_ButtonRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[1];
}
bool ButtonRequest_ButtonRequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Other;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FeeOverThreshold;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmOutput;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ResetDevice;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ConfirmWord;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_WipeDevice;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_ProtectCall;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_SignTx;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_FirmwareCheck;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Address;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PublicKey;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicWordCount;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_MnemonicInput;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::_Deprecated_ButtonRequest_PassphraseType;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_UnknownDerivationPath;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_RecoveryHomepage;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Success;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_Warning;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PassphraseEntry;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequest_PinEntry;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MIN;
constexpr ButtonRequest_ButtonRequestType ButtonRequest::ButtonRequestType_MAX;
constexpr int ButtonRequest::ButtonRequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinMatrixRequest_PinMatrixRequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2dcommon_2eproto);
  return file_level_enum_descriptors_messages_2dcommon_2eproto[2];
}
bool PinMatrixRequest_PinMatrixRequestType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_Current;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewFirst;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_NewSecond;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_WipeCodeFirst;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_WipeCodeSecond;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MIN;
constexpr PinMatrixRequest_PinMatrixRequestType PinMatrixRequest::PinMatrixRequestType_MAX;
constexpr int PinMatrixRequest::PinMatrixRequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Success::_Internal {
 public:
  using HasBits = decltype(std::declval<Success>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Success::Success(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.Success)
}
Success::Success(const Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Success* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Success)
}

inline void Success::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Success::~Success() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Success)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Success::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Success::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Success::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Success)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Success::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "hw.trezor.messages.common.Success.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Success::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Success)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.Success.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Success)
  return target;
}

size_t Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Success)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1 [default = ""];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Success::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Success::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Success::GetClassData() const { return &_class_data_; }


void Success::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Success*>(&to_msg);
  auto& from = static_cast<const Success&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Success)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Success::CopyFrom(const Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {
  return true;
}

void Success::InternalSwap(Success* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Success::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[0]);
}

// ===================================================================

class Failure::_Internal {
 public:
  using HasBits = decltype(std::declval<Failure>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Failure::Failure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.Failure)
}
Failure::Failure(const Failure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Failure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Failure)
}

inline void Failure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){1}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Failure::~Failure() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Failure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Failure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Failure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Failure::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Failure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    _impl_.code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Failure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::Failure_FailureType_IsValid(val))) {
            _internal_set_code(static_cast<::hw::trezor::messages::common::Failure_FailureType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "hw.trezor.messages.common.Failure.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Failure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Failure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.Failure.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Failure)
  return target;
}

size_t Failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Failure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .hw.trezor.messages.common.Failure.FailureType code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Failure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Failure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Failure::GetClassData() const { return &_class_data_; }


void Failure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Failure*>(&to_msg);
  auto& from = static_cast<const Failure&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Failure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Failure::CopyFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {
  return true;
}

void Failure::InternalSwap(Failure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Failure::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[1]);
}

// ===================================================================

class ButtonRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ButtonRequest>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ButtonRequest::ButtonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.ButtonRequest)
}
ButtonRequest::ButtonRequest(const ButtonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ButtonRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pages_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pages_, &from._impl_.pages_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.pages_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.ButtonRequest)
}

inline void ButtonRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pages_){0u}
    , decltype(_impl_.code_){1}
  };
}

ButtonRequest::~ButtonRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.ButtonRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ButtonRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ButtonRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ButtonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.ButtonRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.pages_ = 0u;
    _impl_.code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ButtonRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::ButtonRequest_ButtonRequestType_IsValid(val))) {
            _internal_set_code(static_cast<::hw::trezor::messages::common::ButtonRequest_ButtonRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pages(&has_bits);
          _impl_.pages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ButtonRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.ButtonRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional uint32 pages = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.ButtonRequest)
  return target;
}

size_t ButtonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.ButtonRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 pages = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pages());
    }

    // optional .hw.trezor.messages.common.ButtonRequest.ButtonRequestType code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ButtonRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonRequest::GetClassData() const { return &_class_data_; }


void ButtonRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ButtonRequest*>(&to_msg);
  auto& from = static_cast<const ButtonRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.ButtonRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pages_ = from._impl_.pages_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.code_ = from._impl_.code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ButtonRequest::CopyFrom(const ButtonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.ButtonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonRequest::IsInitialized() const {
  return true;
}

void ButtonRequest::InternalSwap(ButtonRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pages_, other->_impl_.pages_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ButtonRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[2]);
}

// ===================================================================

class ButtonAck::_Internal {
 public:
};

ButtonAck::ButtonAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.ButtonAck)
}
ButtonAck::ButtonAck(const ButtonAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ButtonAck* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.ButtonAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ButtonAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ButtonAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ButtonAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[3]);
}

// ===================================================================

class PinMatrixRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PinMatrixRequest>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PinMatrixRequest::PinMatrixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.PinMatrixRequest)
}
PinMatrixRequest::PinMatrixRequest(const PinMatrixRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PinMatrixRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PinMatrixRequest)
}

inline void PinMatrixRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){1}
  };
}

PinMatrixRequest::~PinMatrixRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PinMatrixRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinMatrixRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PinMatrixRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PinMatrixRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PinMatrixRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PinMatrixRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType_IsValid(val))) {
            _internal_set_type(static_cast<::hw::trezor::messages::common::PinMatrixRequest_PinMatrixRequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PinMatrixRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PinMatrixRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PinMatrixRequest)
  return target;
}

size_t PinMatrixRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PinMatrixRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hw.trezor.messages.common.PinMatrixRequest.PinMatrixRequestType type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PinMatrixRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PinMatrixRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PinMatrixRequest::GetClassData() const { return &_class_data_; }


void PinMatrixRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PinMatrixRequest*>(&to_msg);
  auto& from = static_cast<const PinMatrixRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PinMatrixRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PinMatrixRequest::CopyFrom(const PinMatrixRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PinMatrixRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixRequest::IsInitialized() const {
  return true;
}

void PinMatrixRequest::InternalSwap(PinMatrixRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PinMatrixRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[4]);
}

// ===================================================================

class PinMatrixAck::_Internal {
 public:
  using HasBits = decltype(std::declval<PinMatrixAck>()._impl_._has_bits_);
  static void set_has_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PinMatrixAck::PinMatrixAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.PinMatrixAck)
}
PinMatrixAck::PinMatrixAck(const PinMatrixAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PinMatrixAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pin()) {
    _this->_impl_.pin_.Set(from._internal_pin(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PinMatrixAck)
}

inline void PinMatrixAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pin_){}
  };
  _impl_.pin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PinMatrixAck::~PinMatrixAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PinMatrixAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinMatrixAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pin_.Destroy();
}

void PinMatrixAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PinMatrixAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PinMatrixAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pin_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PinMatrixAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "hw.trezor.messages.common.PinMatrixAck.pin");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PinMatrixAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PinMatrixAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string pin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.PinMatrixAck.pin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PinMatrixAck)
  return target;
}

size_t PinMatrixAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PinMatrixAck)
  size_t total_size = 0;

  // required string pin = 1;
  if (_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PinMatrixAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PinMatrixAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PinMatrixAck::GetClassData() const { return &_class_data_; }


void PinMatrixAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PinMatrixAck*>(&to_msg);
  auto& from = static_cast<const PinMatrixAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PinMatrixAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _this->_internal_set_pin(from._internal_pin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PinMatrixAck::CopyFrom(const PinMatrixAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PinMatrixAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinMatrixAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PinMatrixAck::InternalSwap(PinMatrixAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pin_, lhs_arena,
      &other->_impl_.pin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PinMatrixAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[5]);
}

// ===================================================================

class PassphraseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PassphraseRequest>()._impl_._has_bits_);
  static void set_has__on_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PassphraseRequest::PassphraseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.PassphraseRequest)
}
PassphraseRequest::PassphraseRequest(const PassphraseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PassphraseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._on_device_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_._on_device_ = from._impl_._on_device_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PassphraseRequest)
}

inline void PassphraseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_._on_device_){false}
  };
}

PassphraseRequest::~PassphraseRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PassphraseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassphraseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PassphraseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassphraseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PassphraseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._on_device_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassphraseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool _on_device = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has__on_device(&has_bits);
          _impl_._on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassphraseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PassphraseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool _on_device = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal__on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PassphraseRequest)
  return target;
}

size_t PassphraseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PassphraseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool _on_device = 1 [deprecated = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassphraseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PassphraseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassphraseRequest::GetClassData() const { return &_class_data_; }


void PassphraseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PassphraseRequest*>(&to_msg);
  auto& from = static_cast<const PassphraseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PassphraseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has__on_device()) {
    _this->_internal_set__on_device(from._internal__on_device());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassphraseRequest::CopyFrom(const PassphraseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PassphraseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseRequest::IsInitialized() const {
  return true;
}

void PassphraseRequest::InternalSwap(PassphraseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._on_device_, other->_impl_._on_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassphraseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[6]);
}

// ===================================================================

class PassphraseAck::_Internal {
 public:
  using HasBits = decltype(std::declval<PassphraseAck>()._impl_._has_bits_);
  static void set_has_passphrase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has__state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_on_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PassphraseAck::PassphraseAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.PassphraseAck)
}
PassphraseAck::PassphraseAck(const PassphraseAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PassphraseAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passphrase_){}
    , decltype(_impl_._state_){}
    , decltype(_impl_.on_device_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.passphrase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passphrase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passphrase()) {
    _this->_impl_.passphrase_.Set(from._internal_passphrase(), 
      _this->GetArenaForAllocation());
  }
  _impl_._state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has__state()) {
    _this->_impl_._state_.Set(from._internal__state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.on_device_ = from._impl_.on_device_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.PassphraseAck)
}

inline void PassphraseAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passphrase_){}
    , decltype(_impl_._state_){}
    , decltype(_impl_.on_device_){false}
  };
  _impl_.passphrase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passphrase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_._state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PassphraseAck::~PassphraseAck() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.PassphraseAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassphraseAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passphrase_.Destroy();
  _impl_._state_.Destroy();
}

void PassphraseAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassphraseAck::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.PassphraseAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.passphrase_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_._state_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.on_device_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassphraseAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string passphrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "hw.trezor.messages.common.PassphraseAck.passphrase");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes _state = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable__state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool on_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_on_device(&has_bits);
          _impl_.on_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassphraseAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.PassphraseAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string passphrase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.common.PassphraseAck.passphrase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_passphrase(), target);
  }

  // optional bytes _state = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal__state(), target);
  }

  // optional bool on_device = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_on_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.PassphraseAck)
  return target;
}

size_t PassphraseAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.PassphraseAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string passphrase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passphrase());
    }

    // optional bytes _state = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal__state());
    }

    // optional bool on_device = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassphraseAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PassphraseAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassphraseAck::GetClassData() const { return &_class_data_; }


void PassphraseAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PassphraseAck*>(&to_msg);
  auto& from = static_cast<const PassphraseAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.PassphraseAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_passphrase(from._internal_passphrase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set__state(from._internal__state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.on_device_ = from._impl_.on_device_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassphraseAck::CopyFrom(const PassphraseAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.PassphraseAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassphraseAck::IsInitialized() const {
  return true;
}

void PassphraseAck::InternalSwap(PassphraseAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passphrase_, lhs_arena,
      &other->_impl_.passphrase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._state_, lhs_arena,
      &other->_impl_._state_, rhs_arena
  );
  swap(_impl_.on_device_, other->_impl_.on_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassphraseAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[7]);
}

// ===================================================================

class Deprecated_PassphraseStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<Deprecated_PassphraseStateRequest>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Deprecated_PassphraseStateRequest::Deprecated_PassphraseStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
}
Deprecated_PassphraseStateRequest::Deprecated_PassphraseStateRequest(const Deprecated_PassphraseStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deprecated_PassphraseStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
}

inline void Deprecated_PassphraseStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.state_){}
  };
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Deprecated_PassphraseStateRequest::~Deprecated_PassphraseStateRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deprecated_PassphraseStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destroy();
}

void Deprecated_PassphraseStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deprecated_PassphraseStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.state_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deprecated_PassphraseStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Deprecated_PassphraseStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  return target;
}

size_t Deprecated_PassphraseStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes state = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deprecated_PassphraseStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deprecated_PassphraseStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deprecated_PassphraseStateRequest::GetClassData() const { return &_class_data_; }


void Deprecated_PassphraseStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deprecated_PassphraseStateRequest*>(&to_msg);
  auto& from = static_cast<const Deprecated_PassphraseStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deprecated_PassphraseStateRequest::CopyFrom(const Deprecated_PassphraseStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.Deprecated_PassphraseStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_PassphraseStateRequest::IsInitialized() const {
  return true;
}

void Deprecated_PassphraseStateRequest::InternalSwap(Deprecated_PassphraseStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_PassphraseStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[8]);
}

// ===================================================================

class Deprecated_PassphraseStateAck::_Internal {
 public:
};

Deprecated_PassphraseStateAck::Deprecated_PassphraseStateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
}
Deprecated_PassphraseStateAck::Deprecated_PassphraseStateAck(const Deprecated_PassphraseStateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Deprecated_PassphraseStateAck* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.Deprecated_PassphraseStateAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deprecated_PassphraseStateAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deprecated_PassphraseStateAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_PassphraseStateAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[9]);
}

// ===================================================================

class HDNodeType::_Internal {
 public:
  using HasBits = decltype(std::declval<HDNodeType>()._impl_._has_bits_);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fingerprint(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_child_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chain_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

HDNodeType::HDNodeType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hw.trezor.messages.common.HDNodeType)
}
HDNodeType::HDNodeType(const HDNodeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HDNodeType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_code_){}
    , decltype(_impl_.private_key_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.fingerprint_){}
    , decltype(_impl_.child_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chain_code()) {
    _this->_impl_.chain_code_.Set(from._internal_chain_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key()) {
    _this->_impl_.private_key_.Set(from._internal_private_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_public_key()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.depth_, &from._impl_.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.child_num_) -
    reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.child_num_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.common.HDNodeType)
}

inline void HDNodeType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_code_){}
    , decltype(_impl_.private_key_){}
    , decltype(_impl_.public_key_){}
    , decltype(_impl_.depth_){0u}
    , decltype(_impl_.fingerprint_){0u}
    , decltype(_impl_.child_num_){0u}
  };
  _impl_.chain_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HDNodeType::~HDNodeType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.common.HDNodeType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HDNodeType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_code_.Destroy();
  _impl_.private_key_.Destroy();
  _impl_.public_key_.Destroy();
}

void HDNodeType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HDNodeType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.common.HDNodeType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chain_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.private_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.public_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.child_num_) -
        reinterpret_cast<char*>(&_impl_.depth_)) + sizeof(_impl_.child_num_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HDNodeType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_depth(&has_bits);
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 fingerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fingerprint(&has_bits);
          _impl_.fingerprint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 child_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_child_num(&has_bits);
          _impl_.child_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes chain_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chain_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes private_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_private_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes public_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HDNodeType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.common.HDNodeType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 depth = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_depth(), target);
  }

  // required uint32 fingerprint = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fingerprint(), target);
  }

  // required uint32 child_num = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_child_num(), target);
  }

  // required bytes chain_code = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_chain_code(), target);
  }

  // optional bytes private_key = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_private_key(), target);
  }

  // required bytes public_key = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.common.HDNodeType)
  return target;
}

size_t HDNodeType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hw.trezor.messages.common.HDNodeType)
  size_t total_size = 0;

  if (_internal_has_chain_code()) {
    // required bytes chain_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_code());
  }

  if (_internal_has_public_key()) {
    // required bytes public_key = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (_internal_has_depth()) {
    // required uint32 depth = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depth());
  }

  if (_internal_has_fingerprint()) {
    // required uint32 fingerprint = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fingerprint());
  }

  if (_internal_has_child_num()) {
    // required uint32 child_num = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_child_num());
  }

  return total_size;
}
size_t HDNodeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.common.HDNodeType)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required bytes chain_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_code());

    // required bytes public_key = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());

    // required uint32 depth = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depth());

    // required uint32 fingerprint = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fingerprint());

    // required uint32 child_num = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_child_num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes private_key = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_private_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HDNodeType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HDNodeType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HDNodeType::GetClassData() const { return &_class_data_; }


void HDNodeType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HDNodeType*>(&to_msg);
  auto& from = static_cast<const HDNodeType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.common.HDNodeType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chain_code(from._internal_chain_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_private_key(from._internal_private_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.depth_ = from._impl_.depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fingerprint_ = from._impl_.fingerprint_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.child_num_ = from._impl_.child_num_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HDNodeType::CopyFrom(const HDNodeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.common.HDNodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDNodeType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HDNodeType::InternalSwap(HDNodeType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chain_code_, lhs_arena,
      &other->_impl_.chain_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_key_, lhs_arena,
      &other->_impl_.private_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HDNodeType, _impl_.child_num_)
      + sizeof(HDNodeType::_impl_.child_num_)
      - PROTOBUF_FIELD_OFFSET(HDNodeType, _impl_.depth_)>(
          reinterpret_cast<char*>(&_impl_.depth_),
          reinterpret_cast<char*>(&other->_impl_.depth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HDNodeType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2dcommon_2eproto_getter, &descriptor_table_messages_2dcommon_2eproto_once,
      file_level_metadata_messages_2dcommon_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace messages
}  // namespace trezor
}  // namespace hw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Success*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::Success >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Failure*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Failure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::Failure >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::ButtonRequest*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::ButtonRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::ButtonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::ButtonAck*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::ButtonAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::ButtonAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PinMatrixRequest*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PinMatrixRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::PinMatrixRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PinMatrixAck*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PinMatrixAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::PinMatrixAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PassphraseRequest*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PassphraseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::PassphraseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::PassphraseAck*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::PassphraseAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::PassphraseAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::Deprecated_PassphraseStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::Deprecated_PassphraseStateAck*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::Deprecated_PassphraseStateAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::Deprecated_PassphraseStateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::common::HDNodeType*
Arena::CreateMaybeMessage< ::hw::trezor::messages::common::HDNodeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hw::trezor::messages::common::HDNodeType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
