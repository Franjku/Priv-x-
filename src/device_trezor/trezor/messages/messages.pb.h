// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace hw {
namespace trezor {
namespace messages {

enum MessageType : int {
  MessageType_Initialize = 0,
  MessageType_Ping = 1,
  MessageType_Success = 2,
  MessageType_Failure = 3,
  MessageType_ChangePin = 4,
  MessageType_WipeDevice = 5,
  MessageType_GetEntropy = 9,
  MessageType_Entropy = 10,
  MessageType_LoadDevice = 13,
  MessageType_ResetDevice = 14,
  MessageType_SetBusy = 16,
  MessageType_Features = 17,
  MessageType_PinMatrixRequest = 18,
  MessageType_PinMatrixAck = 19,
  MessageType_Cancel = 20,
  MessageType_LockDevice = 24,
  MessageType_ApplySettings = 25,
  MessageType_ButtonRequest = 26,
  MessageType_ButtonAck = 27,
  MessageType_ApplyFlags = 28,
  MessageType_GetNonce = 31,
  MessageType_Nonce = 33,
  MessageType_BackupDevice = 34,
  MessageType_EntropyRequest = 35,
  MessageType_EntropyAck = 36,
  MessageType_PassphraseRequest = 41,
  MessageType_PassphraseAck = 42,
  MessageType_RecoveryDevice = 45,
  MessageType_WordRequest = 46,
  MessageType_WordAck = 47,
  MessageType_GetFeatures = 55,
  MessageType_SdProtect = 79,
  MessageType_ChangeWipeCode = 82,
  MessageType_EndSession = 83,
  MessageType_DoPreauthorized = 84,
  MessageType_PreauthorizedRequest = 85,
  MessageType_CancelAuthorization = 86,
  MessageType_RebootToBootloader = 87,
  MessageType_GetFirmwareHash = 88,
  MessageType_FirmwareHash = 89,
  MessageType_UnlockPath = 93,
  MessageType_UnlockedPathRequest = 94,
  MessageType_SetU2FCounter = 63,
  MessageType_GetNextU2FCounter = 80,
  MessageType_NextU2FCounter = 81,
  MessageType_Deprecated_PassphraseStateRequest PROTOBUF_DEPRECATED_ENUM = 77,
  MessageType_Deprecated_PassphraseStateAck PROTOBUF_DEPRECATED_ENUM = 78,
  MessageType_FirmwareErase = 6,
  MessageType_FirmwareUpload = 7,
  MessageType_FirmwareRequest = 8,
  MessageType_SelfTest = 32,
  MessageType_GetPublicKey = 11,
  MessageType_PublicKey = 12,
  MessageType_SignTx = 15,
  MessageType_TxRequest = 21,
  MessageType_TxAck = 22,
  MessageType_GetAddress = 29,
  MessageType_Address = 30,
  MessageType_TxAckPaymentRequest = 37,
  MessageType_SignMessage = 38,
  MessageType_VerifyMessage = 39,
  MessageType_MessageSignature = 40,
  MessageType_GetOwnershipId = 43,
  MessageType_OwnershipId = 44,
  MessageType_GetOwnershipProof = 49,
  MessageType_OwnershipProof = 50,
  MessageType_AuthorizeCoinJoin = 51,
  MessageType_CipherKeyValue = 23,
  MessageType_CipheredKeyValue = 48,
  MessageType_SignIdentity = 53,
  MessageType_SignedIdentity = 54,
  MessageType_GetECDHSessionKey = 61,
  MessageType_ECDHSessionKey = 62,
  MessageType_CosiCommit = 71,
  MessageType_CosiCommitment = 72,
  MessageType_CosiSign = 73,
  MessageType_CosiSignature = 74,
  MessageType_DebugLinkDecision = 100,
  MessageType_DebugLinkGetState = 101,
  MessageType_DebugLinkState = 102,
  MessageType_DebugLinkStop = 103,
  MessageType_DebugLinkLog = 104,
  MessageType_DebugLinkMemoryRead = 110,
  MessageType_DebugLinkMemory = 111,
  MessageType_DebugLinkMemoryWrite = 112,
  MessageType_DebugLinkFlashErase = 113,
  MessageType_DebugLinkLayout = 9001,
  MessageType_DebugLinkReseedRandom = 9002,
  MessageType_DebugLinkRecordScreen = 9003,
  MessageType_DebugLinkEraseSdCard = 9005,
  MessageType_DebugLinkWatchLayout = 9006,
  MessageType_EthereumGetPublicKey = 450,
  MessageType_EthereumPublicKey = 451,
  MessageType_EthereumGetAddress = 56,
  MessageType_EthereumAddress = 57,
  MessageType_EthereumSignTx = 58,
  MessageType_EthereumSignTxEIP1559 = 452,
  MessageType_EthereumTxRequest = 59,
  MessageType_EthereumTxAck = 60,
  MessageType_EthereumSignMessage = 64,
  MessageType_EthereumVerifyMessage = 65,
  MessageType_EthereumMessageSignature = 66,
  MessageType_EthereumSignTypedData = 464,
  MessageType_EthereumTypedDataStructRequest = 465,
  MessageType_EthereumTypedDataStructAck = 466,
  MessageType_EthereumTypedDataValueRequest = 467,
  MessageType_EthereumTypedDataValueAck = 468,
  MessageType_EthereumTypedDataSignature = 469,
  MessageType_EthereumSignTypedHash = 470,
  MessageType_NEMGetAddress = 67,
  MessageType_NEMAddress = 68,
  MessageType_NEMSignTx = 69,
  MessageType_NEMSignedTx = 70,
  MessageType_NEMDecryptMessage = 75,
  MessageType_NEMDecryptedMessage = 76,
  MessageType_TezosGetAddress = 150,
  MessageType_TezosAddress = 151,
  MessageType_TezosSignTx = 152,
  MessageType_TezosSignedTx = 153,
  MessageType_TezosGetPublicKey = 154,
  MessageType_TezosPublicKey = 155,
  MessageType_StellarSignTx = 202,
  MessageType_StellarTxOpRequest = 203,
  MessageType_StellarGetAddress = 207,
  MessageType_StellarAddress = 208,
  MessageType_StellarCreateAccountOp = 210,
  MessageType_StellarPaymentOp = 211,
  MessageType_StellarPathPaymentStrictReceiveOp = 212,
  MessageType_StellarManageSellOfferOp = 213,
  MessageType_StellarCreatePassiveSellOfferOp = 214,
  MessageType_StellarSetOptionsOp = 215,
  MessageType_StellarChangeTrustOp = 216,
  MessageType_StellarAllowTrustOp = 217,
  MessageType_StellarAccountMergeOp = 218,
  MessageType_StellarManageDataOp = 220,
  MessageType_StellarBumpSequenceOp = 221,
  MessageType_StellarManageBuyOfferOp = 222,
  MessageType_StellarPathPaymentStrictSendOp = 223,
  MessageType_StellarSignedTx = 230,
  MessageType_CardanoGetPublicKey = 305,
  MessageType_CardanoPublicKey = 306,
  MessageType_CardanoGetAddress = 307,
  MessageType_CardanoAddress = 308,
  MessageType_CardanoTxItemAck = 313,
  MessageType_CardanoTxAuxiliaryDataSupplement = 314,
  MessageType_CardanoTxWitnessRequest = 315,
  MessageType_CardanoTxWitnessResponse = 316,
  MessageType_CardanoTxHostAck = 317,
  MessageType_CardanoTxBodyHash = 318,
  MessageType_CardanoSignTxFinished = 319,
  MessageType_CardanoSignTxInit = 320,
  MessageType_CardanoTxInput = 321,
  MessageType_CardanoTxOutput = 322,
  MessageType_CardanoAssetGroup = 323,
  MessageType_CardanoToken = 324,
  MessageType_CardanoTxCertificate = 325,
  MessageType_CardanoTxWithdrawal = 326,
  MessageType_CardanoTxAuxiliaryData = 327,
  MessageType_CardanoPoolOwner = 328,
  MessageType_CardanoPoolRelayParameters = 329,
  MessageType_CardanoGetNativeScriptHash = 330,
  MessageType_CardanoNativeScriptHash = 331,
  MessageType_CardanoTxMint = 332,
  MessageType_CardanoTxCollateralInput = 333,
  MessageType_CardanoTxRequiredSigner = 334,
  MessageType_CardanoTxInlineDatumChunk = 335,
  MessageType_CardanoTxReferenceScriptChunk = 336,
  MessageType_CardanoTxReferenceInput = 337,
  MessageType_RippleGetAddress = 400,
  MessageType_RippleAddress = 401,
  MessageType_RippleSignTx = 402,
  MessageType_RippleSignedTx = 403,
  MessageType_MoneroTransactionInitRequest = 501,
  MessageType_MoneroTransactionInitAck = 502,
  MessageType_MoneroTransactionSetInputRequest = 503,
  MessageType_MoneroTransactionSetInputAck = 504,
  MessageType_MoneroTransactionInputViniRequest = 507,
  MessageType_MoneroTransactionInputViniAck = 508,
  MessageType_MoneroTransactionAllInputsSetRequest = 509,
  MessageType_MoneroTransactionAllInputsSetAck = 510,
  MessageType_MoneroTransactionSetOutputRequest = 511,
  MessageType_MoneroTransactionSetOutputAck = 512,
  MessageType_MoneroTransactionAllOutSetRequest = 513,
  MessageType_MoneroTransactionAllOutSetAck = 514,
  MessageType_MoneroTransactionSignInputRequest = 515,
  MessageType_MoneroTransactionSignInputAck = 516,
  MessageType_MoneroTransactionFinalRequest = 517,
  MessageType_MoneroTransactionFinalAck = 518,
  MessageType_MoneroKeyImageExportInitRequest = 530,
  MessageType_MoneroKeyImageExportInitAck = 531,
  MessageType_MoneroKeyImageSyncStepRequest = 532,
  MessageType_MoneroKeyImageSyncStepAck = 533,
  MessageType_MoneroKeyImageSyncFinalRequest = 534,
  MessageType_MoneroKeyImageSyncFinalAck = 535,
  MessageType_MoneroGetAddress = 540,
  MessageType_MoneroAddress = 541,
  MessageType_MoneroGetWatchKey = 542,
  MessageType_MoneroWatchKey = 543,
  MessageType_DebugMoneroDiagRequest = 546,
  MessageType_DebugMoneroDiagAck = 547,
  MessageType_MoneroGetTxKeyRequest = 550,
  MessageType_MoneroGetTxKeyAck = 551,
  MessageType_MoneroLiveRefreshStartRequest = 552,
  MessageType_MoneroLiveRefreshStartAck = 553,
  MessageType_MoneroLiveRefreshStepRequest = 554,
  MessageType_MoneroLiveRefreshStepAck = 555,
  MessageType_MoneroLiveRefreshFinalRequest = 556,
  MessageType_MoneroLiveRefreshFinalAck = 557,
  MessageType_EosGetPublicKey = 600,
  MessageType_EosPublicKey = 601,
  MessageType_EosSignTx = 602,
  MessageType_EosTxActionRequest = 603,
  MessageType_EosTxActionAck = 604,
  MessageType_EosSignedTx = 605,
  MessageType_BinanceGetAddress = 700,
  MessageType_BinanceAddress = 701,
  MessageType_BinanceGetPublicKey = 702,
  MessageType_BinancePublicKey = 703,
  MessageType_BinanceSignTx = 704,
  MessageType_BinanceTxRequest = 705,
  MessageType_BinanceTransferMsg = 706,
  MessageType_BinanceOrderMsg = 707,
  MessageType_BinanceCancelMsg = 708,
  MessageType_BinanceSignedTx = 709,
  MessageType_WebAuthnListResidentCredentials = 800,
  MessageType_WebAuthnCredentials = 801,
  MessageType_WebAuthnAddResidentCredential = 802,
  MessageType_WebAuthnRemoveResidentCredential = 803
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MessageType_Initialize;
constexpr MessageType MessageType_MAX = MessageType_DebugLinkWatchLayout;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================

static const int kWireInFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_in;
static const int kWireOutFieldNumber = 50003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_out;
static const int kWireDebugInFieldNumber = 50004;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_debug_in;
static const int kWireDebugOutFieldNumber = 50005;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_debug_out;
static const int kWireTinyFieldNumber = 50006;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_tiny;
static const int kWireBootloaderFieldNumber = 50007;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_bootloader;
static const int kWireNoFsmFieldNumber = 50008;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  wire_no_fsm;
static const int kBitcoinOnlyFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  bitcoin_only;
static const int kHasBitcoinOnlyValuesFieldNumber = 51001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  has_bitcoin_only_values;
static const int kExperimentalMessageFieldNumber = 52001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  experimental_message;
static const int kWireTypeFieldNumber = 52002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  wire_type;
static const int kExperimentalFieldFieldNumber = 53001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  experimental_field;
static const int kIncludeInBitcoinOnlyFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  include_in_bitcoin_only;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace trezor
}  // namespace hw

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hw::trezor::messages::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hw::trezor::messages::MessageType>() {
  return ::hw::trezor::messages::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
